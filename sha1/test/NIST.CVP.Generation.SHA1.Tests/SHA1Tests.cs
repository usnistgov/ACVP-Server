using Moq;
using NIST.CVP.Generation.SHA;
using NIST.CVP.Math;
using NUnit.Framework;
using System;

namespace NIST.CVP.Generation.SHA1.Tests
{
    [TestFixture]
    public class SHA1Tests
    {
        [Test]
        [TestCase(
            "6162 63",      // "abc" in hex
            "A999 3E36 4706 816A BA3E 2571 7850 C26C 9CD0 D89D"
        )]
        [TestCase(
            "CAFE BABE FACE DAD0 DECA F888",
            "E6F0 CCF9 9E46 DE75 236E 9A1E E121 EAD4 913F CE61"
        )]
        [TestCase(
            "0000 1111 2222 3333 4444 5555 6666 7777 8888 9999 AAAA BBBB CCCC DDDD EEEE FFFF",
            "460D 008D B9AA 9FFA DB2C 6F2B 1F74 201A 87F0 881A"
        )]
        [TestCase(
            "",             // Check null message also
            "DA39 A3EE 5E6B 4B0D 3255 BFEF 9560 1890 AFD8 0709"
        )]
        public void ShouldHashSuccessfully(string message, string digest)
        {
            var messageBS = new BitString(message);
            var digestBS = new BitString(digest);
            var subject = new SHA1(new SHAFactory());

            var results = subject.HashMessage(messageBS);

            Assert.AreEqual(digestBS, results.Digest);
        }

        [Test]
        [TestCase(
            "f420de4fac7a93304f01e9a4cc3c65f2e042c8a08a682c37c01c5046601131a9699dda0b6b5f7caa3c24c15aed0b5ecdfce8e811cbe7e85a51723102105471ce471e077368c91459cc9ed59ea653305e36778c323f10e6f6ba8221d0ccb29e6df66c0d8e8c0283c46836cc77df5a022df4b65e09cc2a4f926215c9b77c75e00fde4f9565bd51f07376b64fee806afdc39f6e06a15b7f4ab7b1f2d1bf08e35e3b678e47fee4fd83ef60e4050a71c948a7a0672cffd55500ec0fe3e0f058454179f9f3ca63ea4f66bf8c8897d39abf0d615d69772d20f599b9e4ae9e5355e2b051fc44c79cb58fbe6b646cac51e496717a403c8f3226a73ca6981cb5efe504d44cd84ae5af2f05b67c4e57ed8d35949e79b0a71d16cdb2113c93f5caccf1f1d5f1f5cdcda63ff87379b410018e7703bce61574c9e1ff6041023e0188f362f2dac9bb952688ccb220eafd60925c9029f24ad6693a9ca3f7f481ff07946b1e4f0b5b9369995ec079e357910f45006a4f692c5d4f194fa1c0513f3fd1993c0f50912fe312ce2f0296e449d8e5c481ebbc491411ed0d00e10381c667253d6f1c3d94cd14596c037a514c483aaab7e7fdbab98a5a0dbfb94a08ac9eddcc280b2c5d3bbe8f041ce310f143da1f25c53b",
            "644e38c25821211924ebd70d64ccfa33a2e97474"
        )]
        [TestCase(
            "",
            "eda9df791239cd8d343f4ba9e11db9c4ea679d31"
        )]
        [TestCase(
            "638985ba4eed2b8ad7a546b620a1105b6578d86278090c4a6d62982796e16eebb29866e561f64987dba4286ce2aef39af5e34704c77e8653ef062de5e17262161d91cdbfa6a9a9fdb65f1b34b0d6c253561b8f593cc1d7187cc8a638acc457800d3a6151054e7473d09bc5157263a60ef0e85969bf1926217d71ab29df1d74afeb5dcba2672cd1729123ce17109bc6542b124d3d39d09bf758c9e3bf62c6e12d1dc0b3",
            "fd7f2c5502a682eaf2977d7d12cc1616feb97c3e"
        )]
        public void ShouldHashLongMessagesSuccessfully(string message, string digest)
        {
            var messageBS = new BitString(message);
            var digestBS = new BitString(digest);
            var subject = new SHA1();

            var results = subject.HashMessage(messageBS);

            Assert.AreEqual(digestBS, results.Digest);
        }

        [Test]
        public void ShouldReturnHashResultWithErrorOnException()
        {
            var iSHAFactory = new Mock<ISHAFactory>();
            var subject = new SHA1(iSHAFactory.Object);
            var exceptionMessage = "Error message";

            iSHAFactory
                .Setup(s => s.GetSHA(It.IsAny<HashFunction>()))
                .Throws(new Exception(exceptionMessage));

            var results = subject.HashMessage(new BitString(0));

            Assert.IsFalse(results.Success, nameof(results));
            Assert.IsInstanceOf<HashResult>(results, $"{nameof(results)} type");
            Assert.AreEqual(exceptionMessage, results.ErrorMessage, nameof(exceptionMessage));
        }

        [Test]
        public void ShouldInvokeSHAHashMessageForHash()
        {
            var iSHAFactory = new Mock<ISHAFactory>();
            var subject = new SHA1(iSHAFactory.Object);
            var hashFunction = new HashFunction
            {
                DigestSize = DigestSizes.d160,
                Mode = ModeValues.SHA1
            };

            iSHAFactory
                .Setup(s => s.GetSHA(hashFunction))
                .Returns(new SHA.SHA1(new SHAInternals(hashFunction)));

            var results = subject.HashMessage(new BitString(20));

            Assert.IsTrue(results.Success, nameof(results));
            Assert.IsInstanceOf<HashResult>(results, $"{nameof(results)} type");
        }
    }
}
