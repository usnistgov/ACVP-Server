using System;
using NIST.CVP.Math.Helpers;

namespace NIST.CVP.Crypto.TDES
{
    public class KeySchedule
    {
        private const int NUMBER_OF_ROUNDS = 16;

        public const long LMASK = 0XFCFCFCFCL;

        public static long[,] snop = {
            { 0X808200L,0X0L,0X8000L,0X808202L,
            0X808002L,0X8202L,0X2L,0X8000L,
            0X200L,0X808200L,0X808202L,0X200L,
            0X800202L,0X808002L,0X800000L,0X2L,
            0X202L,0X800200L,0X800200L,0X8200L,
            0X8200L,0X808000L,0X808000L,0X800202L,
            0X8002L,0X800002L,0X800002L,0X8002L,
            0X0L,0X202L,0X8202L,0X800000L,
            0X8000L,0X808202L,0X2L,0X808000L,
            0X808200L,0X800000L,0X800000L,0X200L,
            0X808002L,0X8000L,0X8200L,0X800002L,
            0X200L,0X2L,0X800202L,0X8202L,
            0X808202L,0X8002L,0X808000L,0X800202L,
            0X800002L,0X202L,0X8202L,0X808200L,
            0X202L,0X800200L,0X800200L,0X0L,
            0X8002L,0X8200L,0X0L,0X808002L},

            { 0X104L,0X4010100L,0X0L,0X4010004L,
            0X4000100L,0X0L,0X10104L,0X4000100L,
            0X10004L,0X4000004L,0X4000004L,0X10000L,
            0X4010104L,0X10004L,0X4010000L,0X104L,
            0X4000000L,0X4L,0X4010100L,0X100L,
            0X10100L,0X4010000L,0X4010004L,0X10104L,
            0X4000104L,0X10100L,0X10000L,0X4000104L,
            0X4L,0X4010104L,0X100L,0X4000000L,
            0X4010100L,0X4000000L,0X10004L,0X104L,
            0X10000L,0X4010100L,0X4000100L,0X0L,
            0X100L,0X10004L,0X4010104L,0X4000100L,
            0X4000004L,0X100L,0X0L,0X4010004L,
            0X4000104L,0X10000L,0X4000000L,0X4010104L,
            0X4L,0X10104L,0X10100L,0X4000004L,
            0X4010000L,0X4000104L,0X104L,0X4010000L,
            0X10104L,0X4L,0X4010004L,0X10100L},

            { 0X80L,0X1040080L,0X1040000L,0X21000080L,
            0X40000L,0X80L,0X20000000L,0X1040000L,
            0X20040080L,0X40000L,0X1000080L,0X20040080L,
            0X21000080L,0X21040000L,0X40080L,0X20000000L,
            0X1000000L,0X20040000L,0X20040000L,0X0L,
            0X20000080L,0X21040080L,0X21040080L,0X1000080L,
            0X21040000L,0X20000080L,0X0L,0X21000000L,
            0X1040080L,0X1000000L,0X21000000L,0X40080L,
            0X40000L,0X21000080L,0X80L,0X1000000L,
            0X20000000L,0X1040000L,0X21000080L,0X20040080L,
            0X1000080L,0X20000000L,0X21040000L,0X1040080L,
            0X20040080L,0X80L,0X1000000L,0X21040000L,
            0X21040080L,0X40080L,0X21000000L,0X21040080L,
            0X1040000L,0X0L,0X20040000L,0X21000000L,
            0X40080L,0X1000080L,0X20000080L,0X40000L,
            0X0L,0X20040000L,0X1040080L,0X20000080L},

            { 0X100000L,0X2100001L,0X2000401L,0X0L,
            0X400L,0X2000401L,0X100401L,0X2100400L,
            0X2100401L,0X100000L,0X0L,0X2000001L,
            0X1L,0X2000000L,0X2100001L,0X401L,
            0X2000400L,0X100401L,0X100001L,0X2000400L,
            0X2000001L,0X2100000L,0X2100400L,0X100001L,
            0X2100000L,0X400L,0X401L,0X2100401L,
            0X100400L,0X1L,0X2000000L,0X100400L,
            0X2000000L,0X100400L,0X100000L,0X2000401L,
            0X2000401L,0X2100001L,0X2100001L,0X1L,
            0X100001L,0X2000000L,0X2000400L,0X100000L,
            0X2100400L,0X401L,0X100401L,0X2100400L,
            0X401L,0X2000001L,0X2100401L,0X2100000L,
            0X100400L,0X0L,0X1L,0X2100401L,
            0X0L,0X100401L,0X2100000L,0X400L,
            0X2000001L,0X2000400L,0X400L,0X100001L},

            { 0X40084010L,0X40004000L,0X4000L,0X84010L,
            0X80000L,0X10L,0X40080010L,0X40004010L,
            0X40000010L,0X40084010L,0X40084000L,0X40000000L,
            0X40004000L,0X80000L,0X10L,0X40080010L,
            0X84000L,0X80010L,0X40004010L,0X0L,
            0X40000000L,0X4000L,0X84010L,0X40080000L,
            0X80010L,0X40000010L,0X0L,0X84000L,
            0X4010L,0X40084000L,0X40080000L,0X4010L,
            0X0L,0X84010L,0X40080010L,0X80000L,
            0X40004010L,0X40080000L,0X40084000L,0X4000L,
            0X40080000L,0X40004000L,0X10L,0X40084010L,
            0X84010L,0X10L,0X4000L,0X40000000L,
            0X4010L,0X40084000L,0X80000L,0X40000010L,
            0X80010L,0X40004010L,0X40000010L,0X80010L,
            0X84000L,0X0L,0X40004000L,0X4010L,
            0X40000000L,0X40080010L,0X40084010L,0X84000L},

            { 0X80401000L,0X80001040L,0X80001040L,0X40L,
            0X401040L,0X80400040L,0X80400000L,0X80001000L,
            0X0L,0X401000L,0X401000L,0X80401040L,
            0X80000040L,0X0L,0X400040L,0X80400000L,
            0X80000000L,0X1000L,0X400000L,0X80401000L,
            0X40L,0X400000L,0X80001000L,0X1040L,
            0X80400040L,0X80000000L,0X1040L,0X400040L,
            0X1000L,0X401040L,0X80401040L,0X80000040L,
            0X400040L,0X80400000L,0X401000L,0X80401040L,
            0X80000040L,0X0L,0X0L,0X401000L,
            0X1040L,0X400040L,0X80400040L,0X80000000L,
            0X80401000L,0X80001040L,0X80001040L,0X40L,
            0X80401040L,0X80000040L,0X80000000L,0X1000L,
            0X80400000L,0X80001000L,0X401040L,0X80400040L,
            0X80001000L,0X1040L,0X400000L,0X80401000L,
            0X40L,0X400000L,0X1000L,0X401040L},

            { 0X10000008L,0X10200000L,0X2000L,0X10202008L,
            0X10200000L,0X8L,0X10202008L,0X200000L,
            0X10002000L,0X202008L,0X200000L,0X10000008L,
            0X200008L,0X10002000L,0X10000000L,0X2008L,
            0X0L,0X200008L,0X10002008L,0X2000L,
            0X202000L,0X10002008L,0X8L,0X10200008L,
            0X10200008L,0X0L,0X202008L,0X10202000L,
            0X2008L,0X202000L,0X10202000L,0X10000000L,
            0X10002000L,0X8L,0X10200008L,0X202000L,
            0X10202008L,0X200000L,0X2008L,0X10000008L,
            0X200000L,0X10002000L,0X10000000L,0X2008L,
            0X10000008L,0X10202008L,0X202000L,0X10200000L,
            0X202008L,0X10202000L,0X0L,0X10200008L,
            0X8L,0X2000L,0X10200000L,0X202008L,
            0X2000L,0X200008L,0X10002008L,0X0L,
            0X10202000L,0X10000000L,0X200008L,0X10002008L},

            { 0X8000820L,0X800L,0X20000L,0X8020820L,
            0X8000000L,0X8000820L,0X20L,0X8000000L,
            0X20020L,0X8020000L,0X8020820L,0X20800L,
            0X8020800L,0X20820L,0X800L,0X20L,
            0X8020000L,0X8000020L,0X8000800L,0X820L,
            0X20800L,0X20020L,0X8020020L,0X8020800L,
            0X820L,0X0L,0X0L,0X8020020L,
            0X8000020L,0X8000800L,0X20820L,0X20000L,
            0X20820L,0X20000L,0X8020800L,0X800L,
            0X20L,0X8020020L,0X800L,0X20820L,
            0X8000800L,0X20L,0X8000020L,0X8020000L,
            0X8020020L,0X8000000L,0X20000L,0X8000820L,
            0X0L,0X8020820L,0X20020L,0X8000020L,
            0X8020000L,0X8000800L,0X8000820L,0X0L,
            0X8020820L,0X20800L,0X20800L,0X820L,
            0X820L,0X20020L,0X8000000L,0X8020800L }
            };


        public static int[] pc1c =
            {   57, 49, 41, 33, 25, 17, 9,
                1, 58, 50, 42, 34, 26, 18,
                10, 2, 59, 51, 43, 35, 27,
                19, 11, 3, 60, 52, 44, 36 };

        public static int[] pc1d =
            {   63, 55, 47, 39, 31, 23, 15,
                7, 62, 54, 46, 38, 30, 22,
                14, 6, 61, 53, 45, 37, 29,
                21, 13, 5, 28, 20, 12, 4 };

        public static int[] shiftsked =
            { 1, 1, 2, 2, 2, 2, 2, 2,
              1, 2, 2, 2, 2, 2, 2, 1 };

        public static long[,] pc2otab =  {
            {0X0L,0X10L,0X4000L,0X4010L,0X40000L,0X40010L,0X44000L,0X44010L,
            0X100L,0X110L,0X4100L,0X4110L,0X40100L,0X40110L,0X44100L,0X44110L,
            0X20000L,0X20010L,0X24000L,0X24010L,0X60000L,0X60010L,0X64000L,0X64010L,
            0X20100L,0X20110L,0X24100L,0X24110L,0X60100L,0X60110L,0X64100L,0X64110L,
            0X1L,0X11L,0X4001L,0X4011L,0X40001L,0X40011L,0X44001L,0X44011L,
            0X101L,0X111L,0X4101L,0X4111L,0X40101L,0X40111L,0X44101L,0X44111L,
            0X20001L,0X20011L,0X24001L,0X24011L,0X60001L,0X60011L,0X64001L,0X64011L,
            0X20101L,0X20111L,0X24101L,0X24111L,0X60101L,0X60111L,0X64101L,0X64111L,
            0X80000L,0X80010L,0X84000L,0X84010L,0XC0000L,0XC0010L,0XC4000L,0XC4010L,
            0X80100L,0X80110L,0X84100L,0X84110L,0XC0100L,0XC0110L,0XC4100L,0XC4110L,
            0XA0000L,0XA0010L,0XA4000L,0XA4010L,0XE0000L,0XE0010L,0XE4000L,0XE4010L,
            0XA0100L,0XA0110L,0XA4100L,0XA4110L,0XE0100L,0XE0110L,0XE4100L,0XE4110L,
            0X80001L,0X80011L,0X84001L,0X84011L,0XC0001L,0XC0011L,0XC4001L,0XC4011L,
            0X80101L,0X80111L,0X84101L,0X84111L,0XC0101L,0XC0111L,0XC4101L,0XC4111L,
            0XA0001L,0XA0011L,0XA4001L,0XA4011L,0XE0001L,0XE0011L,0XE4001L,0XE4011L,
            0XA0101L,0XA0111L,0XA4101L,0XA4111L,0XE0101L,0XE0111L,0XE4101L,0XE4111L},

            {0X0L,0X800000L,0X2L,0X800002L,0X200L,0X800200L,0X202L,0X800202L,
            0X200000L,0XA00000L,0X200002L,0XA00002L,0X200200L,0XA00200L,0X200202L,0XA00202L,
            0X1000L,0X801000L,0X1002L,0X801002L,0X1200L,0X801200L,0X1202L,0X801202L,
            0X201000L,0XA01000L,0X201002L,0XA01002L,0X201200L,0XA01200L,0X201202L,0XA01202L,
            0X0L,0X800000L,0X2L,0X800002L,0X200L,0X800200L,0X202L,0X800202L,
            0X200000L,0XA00000L,0X200002L,0XA00002L,0X200200L,0XA00200L,0X200202L,0XA00202L,
            0X1000L,0X801000L,0X1002L,0X801002L,0X1200L,0X801200L,0X1202L,0X801202L,
            0X201000L,0XA01000L,0X201002L,0XA01002L,0X201200L,0XA01200L,0X201202L,0XA01202L,
            0X40L,0X800040L,0X42L,0X800042L,0X240L,0X800240L,0X242L,0X800242L,
            0X200040L,0XA00040L,0X200042L,0XA00042L,0X200240L,0XA00240L,0X200242L,0XA00242L,
            0X1040L,0X801040L,0X1042L,0X801042L,0X1240L,0X801240L,0X1242L,0X801242L,
            0X201040L,0XA01040L,0X201042L,0XA01042L,0X201240L,0XA01240L,0X201242L,0XA01242L,
            0X40L,0X800040L,0X42L,0X800042L,0X240L,0X800240L,0X242L,0X800242L,
            0X200040L,0XA00040L,0X200042L,0XA00042L,0X200240L,0XA00240L,0X200242L,0XA00242L,
            0X1040L,0X801040L,0X1042L,0X801042L,0X1240L,0X801240L,0X1242L,0X801242L,
            0X201040L,0XA01040L,0X201042L,0XA01042L,0X201240L,0XA01240L,0X201242L,0XA01242L},

            {0X0L,0X2000L,0X4L,0X2004L,0X400L,0X2400L,0X404L,0X2404L,
            0X0L,0X2000L,0X4L,0X2004L,0X400L,0X2400L,0X404L,0X2404L,
            0X400000L,0X402000L,0X400004L,0X402004L,0X400400L,0X402400L,0X400404L,0X402404L,
            0X400000L,0X402000L,0X400004L,0X402004L,0X400400L,0X402400L,0X400404L,0X402404L,
            0X20L,0X2020L,0X24L,0X2024L,0X420L,0X2420L,0X424L,0X2424L,
            0X20L,0X2020L,0X24L,0X2024L,0X420L,0X2420L,0X424L,0X2424L,
            0X400020L,0X402020L,0X400024L,0X402024L,0X400420L,0X402420L,0X400424L,0X402424L,
            0X400020L,0X402020L,0X400024L,0X402024L,0X400420L,0X402420L,0X400424L,0X402424L,
            0X8000L,0XA000L,0X8004L,0XA004L,0X8400L,0XA400L,0X8404L,0XA404L,
            0X8000L,0XA000L,0X8004L,0XA004L,0X8400L,0XA400L,0X8404L,0XA404L,
            0X408000L,0X40A000L,0X408004L,0X40A004L,0X408400L,0X40A400L,0X408404L,0X40A404L,
            0X408000L,0X40A000L,0X408004L,0X40A004L,0X408400L,0X40A400L,0X408404L,0X40A404L,
            0X8020L,0XA020L,0X8024L,0XA024L,0X8420L,0XA420L,0X8424L,0XA424L,
            0X8020L,0XA020L,0X8024L,0XA024L,0X8420L,0XA420L,0X8424L,0XA424L,
            0X408020L,0X40A020L,0X408024L,0X40A024L,0X408420L,0X40A420L,0X408424L,0X40A424L,
            0X408020L,0X40A020L,0X408024L,0X40A024L,0X408420L,0X40A420L,0X408424L,0X40A424L},

            { 0X0L,0X10000L,0X8L,0X10008L,0X80L,0X10080L,0X88L,0X10088L,
            0X0L,0X10000L,0X8L,0X10008L,0X80L,0X10080L,0X88L,0X10088L,
            0X100000L,0X110000L,0X100008L,0X110008L,0X100080L,0X110080L,0X100088L,0X110088L,
            0X100000L,0X110000L,0X100008L,0X110008L,0X100080L,0X110080L,0X100088L,0X110088L,
            0X800L,0X10800L,0X808L,0X10808L,0X880L,0X10880L,0X888L,0X10888L,
            0X800L,0X10800L,0X808L,0X10808L,0X880L,0X10880L,0X888L,0X10888L,
            0X100800L,0X110800L,0X100808L,0X110808L,0X100880L,0X110880L,0X100888L,0X110888L,
            0X100800L,0X110800L,0X100808L,0X110808L,0X100880L,0X110880L,0X100888L,0X110888L,
            0X0L,0X10000L,0X8L,0X10008L,0X80L,0X10080L,0X88L,0X10088L,
            0X0L,0X10000L,0X8L,0X10008L,0X80L,0X10080L,0X88L,0X10088L,
            0X100000L,0X110000L,0X100008L,0X110008L,0X100080L,0X110080L,0X100088L,0X110088L,
            0X100000L,0X110000L,0X100008L,0X110008L,0X100080L,0X110080L,0X100088L,0X110088L,
            0X800L,0X10800L,0X808L,0X10808L,0X880L,0X10880L,0X888L,0X10888L,
            0X800L,0X10800L,0X808L,0X10808L,0X880L,0X10880L,0X888L,0X10888L,
            0X100800L,0X110800L,0X100808L,0X110808L,0X100880L,0X110880L,0X100888L,0X110888L,
            0X100800L,0X110800L,0X100808L,0X110808L,0X100880L,0X110880L,0X100888L,0X110888L},

            { 0X0L,0X0L,0X80L,0X80L,0X2000L,0X2000L,0X2080L,0X2080L,
            0X1L,0X1L,0X81L,0X81L,0X2001L,0X2001L,0X2081L,0X2081L,
            0X200000L,0X200000L,0X200080L,0X200080L,0X202000L,0X202000L,0X202080L,0X202080L,
            0X200001L,0X200001L,0X200081L,0X200081L,0X202001L,0X202001L,0X202081L,0X202081L,
            0X20000L,0X20000L,0X20080L,0X20080L,0X22000L,0X22000L,0X22080L,0X22080L,
            0X20001L,0X20001L,0X20081L,0X20081L,0X22001L,0X22001L,0X22081L,0X22081L,
            0X220000L,0X220000L,0X220080L,0X220080L,0X222000L,0X222000L,0X222080L,0X222080L,
            0X220001L,0X220001L,0X220081L,0X220081L,0X222001L,0X222001L,0X222081L,0X222081L,
            0X2L,0X2L,0X82L,0X82L,0X2002L,0X2002L,0X2082L,0X2082L,
            0X3L,0X3L,0X83L,0X83L,0X2003L,0X2003L,0X2083L,0X2083L,
            0X200002L,0X200002L,0X200082L,0X200082L,0X202002L,0X202002L,0X202082L,0X202082L,
            0X200003L,0X200003L,0X200083L,0X200083L,0X202003L,0X202003L,0X202083L,0X202083L,
            0X20002L,0X20002L,0X20082L,0X20082L,0X22002L,0X22002L,0X22082L,0X22082L,
            0X20003L,0X20003L,0X20083L,0X20083L,0X22003L,0X22003L,0X22083L,0X22083L,
            0X220002L,0X220002L,0X220082L,0X220082L,0X222002L,0X222002L,0X222082L,0X222082L,
            0X220003L,0X220003L,0X220083L,0X220083L,0X222003L,0X222003L,0X222083L,0X222083L},

            {0X0L,0X10L,0X800000L,0X800010L,0X10000L,0X10010L,0X810000L,0X810010L,
            0X200L,0X210L,0X800200L,0X800210L,0X10200L,0X10210L,0X810200L,0X810210L,
            0X0L,0X10L,0X800000L,0X800010L,0X10000L,0X10010L,0X810000L,0X810010L,
            0X200L,0X210L,0X800200L,0X800210L,0X10200L,0X10210L,0X810200L,0X810210L,
            0X100000L,0X100010L,0X900000L,0X900010L,0X110000L,0X110010L,0X910000L,0X910010L,
            0X100200L,0X100210L,0X900200L,0X900210L,0X110200L,0X110210L,0X910200L,0X910210L,
            0X100000L,0X100010L,0X900000L,0X900010L,0X110000L,0X110010L,0X910000L,0X910010L,
            0X100200L,0X100210L,0X900200L,0X900210L,0X110200L,0X110210L,0X910200L,0X910210L,
            0X4L,0X14L,0X800004L,0X800014L,0X10004L,0X10014L,0X810004L,0X810014L,
            0X204L,0X214L,0X800204L,0X800214L,0X10204L,0X10214L,0X810204L,0X810214L,
            0X4L,0X14L,0X800004L,0X800014L,0X10004L,0X10014L,0X810004L,0X810014L,
            0X204L,0X214L,0X800204L,0X800214L,0X10204L,0X10214L,0X810204L,0X810214L,
            0X100004L,0X100014L,0X900004L,0X900014L,0X110004L,0X110014L,0X910004L,0X910014L,
            0X100204L,0X100214L,0X900204L,0X900214L,0X110204L,0X110214L,0X910204L,0X910214L,
            0X100004L,0X100014L,0X900004L,0X900014L,0X110004L,0X110014L,0X910004L,0X910014L,
            0X100204L,0X100214L,0X900204L,0X900214L,0X110204L,0X110214L,0X910204L,0X910214L},

            { 0X0L,0X400L,0X1000L,0X1400L,0X80000L,0X80400L,0X81000L,0X81400L,
            0X20L,0X420L,0X1020L,0X1420L,0X80020L,0X80420L,0X81020L,0X81420L,
            0X4000L,0X4400L,0X5000L,0X5400L,0X84000L,0X84400L,0X85000L,0X85400L,
            0X4020L,0X4420L,0X5020L,0X5420L,0X84020L,0X84420L,0X85020L,0X85420L,
            0X800L,0XC00L,0X1800L,0X1C00L,0X80800L,0X80C00L,0X81800L,0X81C00L,
            0X820L,0XC20L,0X1820L,0X1C20L,0X80820L,0X80C20L,0X81820L,0X81C20L,
            0X4800L,0X4C00L,0X5800L,0X5C00L,0X84800L,0X84C00L,0X85800L,0X85C00L,
            0X4820L,0X4C20L,0X5820L,0X5C20L,0X84820L,0X84C20L,0X85820L,0X85C20L,
            0X0L,0X400L,0X1000L,0X1400L,0X80000L,0X80400L,0X81000L,0X81400L,
            0X20L,0X420L,0X1020L,0X1420L,0X80020L,0X80420L,0X81020L,0X81420L,
            0X4000L,0X4400L,0X5000L,0X5400L,0X84000L,0X84400L,0X85000L,0X85400L,
            0X4020L,0X4420L,0X5020L,0X5420L,0X84020L,0X84420L,0X85020L,0X85420L,
            0X800L,0XC00L,0X1800L,0X1C00L,0X80800L,0X80C00L,0X81800L,0X81C00L,
            0X820L,0XC20L,0X1820L,0X1C20L,0X80820L,0X80C20L,0X81820L,0X81C20L,
            0X4800L,0X4C00L,0X5800L,0X5C00L,0X84800L,0X84C00L,0X85800L,0X85C00L,
            0X4820L,0X4C20L,0X5820L,0X5C20L,0X84820L,0X84C20L,0X85820L,0X85C20L},

            {0X0L,0X100L,0X40000L,0X40100L,0X0L,0X100L,0X40000L,0X40100L,
            0X40L,0X140L,0X40040L,0X40140L,0X40L,0X140L,0X40040L,0X40140L,
            0X400000L,0X400100L,0X440000L,0X440100L,0X400000L,0X400100L,0X440000L,0X440100L,
            0X400040L,0X400140L,0X440040L,0X440140L,0X400040L,0X400140L,0X440040L,0X440140L,
            0X8000L,0X8100L,0X48000L,0X48100L,0X8000L,0X8100L,0X48000L,0X48100L,
            0X8040L,0X8140L,0X48040L,0X48140L,0X8040L,0X8140L,0X48040L,0X48140L,
            0X408000L,0X408100L,0X448000L,0X448100L,0X408000L,0X408100L,0X448000L,0X448100L,
            0X408040L,0X408140L,0X448040L,0X448140L,0X408040L,0X408140L,0X448040L,0X448140L,
            0X8L,0X108L,0X40008L,0X40108L,0X8L,0X108L,0X40008L,0X40108L,
            0X48L,0X148L,0X40048L,0X40148L,0X48L,0X148L,0X40048L,0X40148L,
            0X400008L,0X400108L,0X440008L,0X440108L,0X400008L,0X400108L,0X440008L,0X440108L,
            0X400048L,0X400148L,0X440048L,0X440148L,0X400048L,0X400148L,0X440048L,0X440148L,
            0X8008L,0X8108L,0X48008L,0X48108L,0X8008L,0X8108L,0X48008L,0X48108L,
            0X8048L,0X8148L,0X48048L,0X48148L,0X8048L,0X8148L,0X48048L,0X48148L,
            0X408008L,0X408108L,0X448008L,0X448108L,0X408008L,0X408108L,0X448008L,0X448108L,
            0X408048L,0X408148L,0X448048L,0X448148L,0X408048L,0X408148L,0X448048L,0X448148L }
            };

        public FunctionValues Function { get; private set; }
        public uint[,] Schedule { get; private set; }

        public KeySchedule(byte[] rawkey, FunctionValues function, bool ignoreParity)
        {
            Schedule = new uint[16,4];
            Function = function;
            if (!ignoreParity && !rawkey.AllBytesHaveOddParity())
            {
               throw new ArgumentException("Supplied key does not have odd partiy");
            }

            long pcct = 0;
            long pcdt = 0;
            long[] pc2out = new long[2];
            for (int idx = 0; idx < 28; idx++)
            {
                pcct |= rawkey.GetKeyBit( pc1c[idx]);
                pcdt |= rawkey.GetKeyBit( pc1d[idx]);
                if (idx < 27)
                {
                    pcct <<= 1;
                    pcdt <<= 1;
                }
            }
            /* Now, pcct and pcdt have the values on which we can apply
               pc2 and select the key bits, storing them in pc2out[0] and
               pc2out[1]. The high order [pc2out[0]] bits all come from
               pcct, and the low order from pcdt. */

            for (int round = 0; round < NUMBER_OF_ROUNDS; round++)
            {
                pcct = lrot28(pcct);
                pcdt = lrot28(pcdt);
                if (shiftsked[round] == 2)
                {   /* this round needs another shift */
                    pcct = lrot28(pcct);
                    pcdt = lrot28(pcdt);
                }
                pc2out[0] = pc2otab[0,pcct >> 21];
                pc2out[0] |= pc2otab[1,0X7F & (pcct >> 14)];
                pc2out[0] |= pc2otab[2,0X7F & (pcct >> 7)];
                pc2out[0] |= pc2otab[3,0X7F & pcct];

                pc2out[1] = pc2otab[4,pcdt >> 21];
                pc2out[1] |= pc2otab[5,0X7F & (pcdt >> 14)];
                pc2out[1] |= pc2otab[6,0X7F & (pcdt >> 7)];
                pc2out[1] |= pc2otab[7,0X7F & pcdt];
                int workingRound = function == FunctionValues.Decryption ? 15 - round : round;

                Schedule[workingRound,0] = (uint)(0XFC00 & (pc2out[0] >> 8));
                Schedule[workingRound,0] |= (uint)(0XFC & (pc2out[0] >> 4));
                Schedule[workingRound,1] = (uint)(0XFC00 & (pc2out[1] >> 8));
                Schedule[workingRound,1] |= (uint)(0XFC & (pc2out[1] >> 4));

                Schedule[workingRound,2] = (uint)(0XFC00 & (pc2out[0] >> 2));
                Schedule[workingRound,2] |= (uint)(0XFC & (pc2out[0] << 2));
                Schedule[workingRound,3] = (uint)(0XFC00 & (pc2out[1] >> 2));
                Schedule[workingRound,3] |= (uint)(0XFC & (pc2out[1] << 2));
            }
           

        }

        public long lrot28(long lval)
        {
            lval <<= 1;
            if ((0X10000000L & lval) != 0)
            {
                lval++;
            }
            lval &= 0XFFFFFFFL;
            return (lval);
        }

        public byte[] Apply(byte[] input)
        {
            byte[] output = new byte[8];
            long[] inar = new long[2];
            uint[] expan = new uint[4];

            long scopy = 0;
            inar[0] = FourBytesToLong(input, 0);
            inar[1] = FourBytesToLong(input, 4);
            long[] outar = DoInitialPermutation(inar);
            for (int round = 0; round < 16; round++)
            {
                long sbout = 0;
                long tlong = outar[1];
                int oddbit = (int)(01 & tlong);
                tlong >>= 1;
                tlong &= 0X7FFFFFFFL;
                if (oddbit != 0)
                {
                    tlong |= 0X80000000L;
                }
                tlong &= LMASK;
                expan[0] = (uint)(tlong >> 16);
                expan[1] = (uint)tlong;

                tlong = outar[1];
                oddbit = (int)(tlong & 0X80000000L); // DEF 1/18/2017 - the original code:  !!(tlong & 0X80000000L)
                tlong <<= 3;
                if (oddbit != 0)
                {
                    tlong |= 04;
                }
                tlong &= LMASK;
                expan[2] = (uint)(tlong >> 16);
                expan[3] = (uint)tlong;
                for (int expIdx = 0; expIdx < 4; expIdx++)
                {
                    expan[expIdx] ^= this.Schedule[round, expIdx];
                    sbout |= snop[2 * expIdx, 0X3F & (expan[expIdx] >> 10)];
                    sbout |= snop[1 + 2 * expIdx, 0X3F & (expan[expIdx] >> 2)];
                }
                scopy = outar[0];
                outar[0] = outar[1];
                outar[1] = scopy ^ sbout;
            }
            scopy = outar[0];
            outar[0] = outar[1];
            outar[1] = scopy;
            outar = DoPermutationInverse(outar);
            var first4Bytes = LongToFourBytes(outar[0]);
            var next4Bytes = LongToFourBytes(outar[1]);
            Array.Copy(first4Bytes, 0, output, 0, 4);
            Array.Copy(next4Bytes, 0, output, 4, 4);

            return output;

        }

        public long[] DoInitialPermutation(long[] inar)
        {
            long[] outar =  {inar[0], inar[1]};
            EXSHMSK(ref outar[1], 0x0f0f0f0f, ref outar[0], 4);
            EXSHMSK(ref outar[1], 0x0000ffff, ref outar[0], 16);
            EXSHMSK(ref outar[0], 0x33333333, ref outar[1], 2);
            EXSHMSK(ref outar[0], 0x00ff00ff, ref outar[1], 8);
            EXSHMSK(ref outar[1], 0x55555555, ref outar[0], 1);
            return outar;
        }
        public long[] DoPermutationInverse(long[] inar)
        {
            long[] outar =  { inar[0], inar[1] };
            EXSHMSK(ref outar[1], 0x55555555, ref outar[0], 1);
            EXSHMSK(ref outar[0], 0x00ff00ff, ref outar[1], 8);
            EXSHMSK(ref outar[0], 0x33333333, ref outar[1], 2);
            EXSHMSK(ref outar[1], 0x0000ffff, ref outar[0], 16);
            EXSHMSK(ref outar[1], 0x0f0f0f0f, ref outar[0], 4);

            return outar;
        }


        private void EXSHMSK(ref long outArA, long mask, ref long outArB, int shift)
        {
            long tmp = ((outArB >> shift) ^ outArA) & mask;
            outArA ^= tmp;
            tmp <<= shift;
            outArB ^= tmp;

        }

        public long FourBytesToLong(byte[] input, int startIdx)
        {
            long output =  input[startIdx] & 0xff;
            output <<= 8;
            output |= input[startIdx + 1] & 0xff;
            output <<= 8;
            output |= input[startIdx + 2] & 0xff;
            output <<= 8;
            output |= input[startIdx + 3] & 0xff;

            return output;
        }

        public byte[] LongToFourBytes(long l)
        {
            byte[] output = new byte[4];
            output[0] = (byte)((l >> 24) & 0xff);
            output[1] = (byte)((l >> 16) & 0xff);
            output[2] = (byte)((l >> 8) & 0xff);
            output[3] = (byte)(l & 0xff);
            return output;
        }

    }
}
