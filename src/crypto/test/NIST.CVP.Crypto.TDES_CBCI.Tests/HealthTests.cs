using NIST.CVP.Math;
using NIST.CVP.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.Crypto.TDES_CBCI.Tests
{
    [TestFixture, FastCryptoTest]
    public class HealthTests
    {
        [Test]

        [TestCase("80cbbaeff8d67079", "4a7f1370fd9d5bf1", "5ea2a26d23751c73", "77bd1408f5c1cec5", "cd12695e4b17241a", "2267beb3a06c796f", "e61a39558695f0fc736bdf1e802b28e67d79b13415602596", "f36a230e0db76bafab932724b225d5662c070ee27b491504", TestName = "Enc 01")]
        [TestCase("f1da5bc7abb9d949", "621907f8260bbc80", "37dfaedcb383c8c4", "91d39f3478d2c59b", "e728f489ce281af0", "3c7e49df237d7045", "d87c387bfb90c4c49b81c488400135a6db8fa735b89cdcc8aeec91f099409c030a32371c3c609c634accd28fa083c6a9", "680b564e8ed0b69e043b9a6b18ebe76bb202f7baf60552d5cc615e1ebc4fdf617518661da8ebf10ee1c7c9c2ea20315c", TestName = "Enc 02")]
        [TestCase("58e5ea8a91fbb934", "836bce0146104991", "ba766d46ec0b7afb", "fe389e1dbbfc9d7f", "538df3731151f2d4", "a8e348c866a74829", "54c1ab098d56716a92121c11e485c9362fb82f4872c1dc276195c193081ef1e5b08da6fc06f2857b7a092332e657c7d970767204b1ae1c5317c541e987179c2047e9337b1cfa93dd", "29dc25fefc5e4c14b55dff72e3b344adf90060d151fbc70395e057b310b184b3945c56f0164f54f12e7341a52ed86ecf5c7eb96059b3e8e72ae7793782797e4acb65903efd5255e1", TestName = "Enc 03")]
        [TestCase("251a7567867537fb", "209b86d90ea23e8f", "04dc0efe8a02b9f4", "cc122f3b60caed8b", "21678490b62042e0", "76bcd9e60b759835", "b963565aa4f5e80b9c2c24f44e12bc8ba4f98cd3ea0ed78c3031d4a6ef0469fcef42363f6753d530671d6013731c346070b5f5bbc5c7d326ba840b76237fb0034305aba4ebb101dbe23b544c8991ad74bf2978970395d0fad858fd536ef83b7e", "1d547b6a5417e2a74d61b270ff2fd89af5a8db448a785f7e9f63d1f52cdb3e24451c1a810fd8c5f9b4f6a04dedea13d7d8ebef0eede1ef362f1f4e45165b5800e2a028d8df400c5f67f5292d4e615c9011722c80796be6e605f57407d18e9018", TestName = "Enc 04")]
        [TestCase("85ce1c9d029154ae", "bc9deaae08f47c6e", "ba075d9b5249bc52", "0aaa3b28b4894e25", "5fff907e09dea37a", "b554e5d35f33f8cf", "d4b4ade7f508cd72db030e5969d17bcb20bec21336f7e576e895335a11d777aefaaf6f8574817f042427a77f1f38b3dfb78ab14794f5a8f7065a877099e45cd8ea8ec6a1bae6ad6641103015c40ddf536a3e2b1c4c231aaacb6940992624ea484c599c82eebfbe5ed9c6926383d969f0e3e017db860aa459", "4ef14c095e1032b7a7aeaaedd23e77656c8272c94a8221ef8e29c894e2b4a82c9f7556bf6b68c14f6dcfd78d7325bb02d036fd60e55f7688dd2ec7a7f0db73e9bc5a55d147f1f6099d1a04467149594412df25280f144f705bb0d4492ca58125496dff6924eb0323b91485355b3c85fcb82587d6668d89fe", TestName = "Enc 05")]
        [TestCase("3d9b6da4a7980d3b", "8fe35273b62c7354", "1a64e0d383ce0483", "75cdcd20e15ddcf9", "cb23227636b3324e", "207877cb8c0887a3", "ffbdbcc686db8b2062c8872897847c0ce8dbda06f8f2018eaf21bbcedf000a5628c5251119cdbd7797788405833af0ea97ef3c04916fb10a9463230bcb57be174f10033c4b1f0db45eb6195c40bb4568a91b98556e614320ed8726b6ac0b96ab3d465e2e65fa033d7d2a4d15172e02ede506f5e3d7ef3f378434cdb7cb471b7aba103ed1ae85287bbc7b281850bbb0e0", "096fa8db9f4686baf9c01e10f0040dd0acbd6c1be0eeac46538770740112556a53835cb59e8eb2fb8f1ed2e55b81a3e6f7f038474692505bea5add353e113464750a0858178eab818b2103106425d652681e1454aabcbfcb8ed9d221e421b728e234da50277b3e678249243caf92eafdbef143d69d6d0a02ef0d24b67a8cd315cdfb4ac347d5456a71269c8519b1d47d", TestName = "Enc 06")]
        [TestCase("7f521676014fd662", "86d3b95879519413", "c785c77538f46137", "528bbf3688a19e7d", "a7e1148bddf6f3d2", "fd3669e1334c4927", "2dcb6d46ef09696c6a1129e70f1e4ce429e405db1ac57b67e8477055f9c621fa1b666ecac84c3b27a70e167755671a79663013d9a78be302a662243375100ed5aa5d9b0caab0ea8c2880e1aee80c17c2c94cf1a702270b9aace6d94c81e98e37e3983c31209d3d42f451d3b34f730b675920e76fb3ffbbd800bdd8c7a5b968c9cc009964af7bfef2136732af1206be101e943c56437dbd64accd69cd69e86532707bfacbe1b2f343", "0d1359319dbea360993680ea04d228fad4aad1598a66be67bbb23b75e32ceb4fc422638b60e7dac3efaad34c2abc9eaaa19406a954b88634865042f6d2fcc224da34232e30f66566892bfdbd12227995f9366c557c6be013d16274fd035ef52a746cbd4be5b7db666a50a2c373026aa209b10f1335a93bb16315055378a7dbe0fd177d2562225f61a57cc711e272c6b252a78c522231dd1c6799a6ea1c8b6867d03fb7bd9322787d", TestName = "Enc 07")]
        [TestCase("aed96489fe686e8a", "d5c134e0b3eaa20e", "67ce2a0b801004f2", "c111551f6f26fdb6", "1666aa74c47c530b", "6bbbffca19d1a860", "83e665a59fb3ded67824d8493ac86c426f1021be68196bf1dec771f3d91313b7d1a62c3c13a6140767d06ad0f0c7107c53ab764b1cee1c535d63522d979843eede66315839c6025248e6fc96297dcdaa9b5bce11644488c2f1fe78d93da90f8df44ffd62d7bcaf9f62901603ac92abb49047b0780ac4b827e3c0696191ed817c598917c0b62f24d7fef4417f43afb2827798a4e8d415b36b7bd0af2b5c0da0a3553b07dc9ec867e0643a0472b47cebfc9b7532c98cdf81740157d2a165b074ea", "f1190091ee4da60c8989706ce5bf92b32f6dc89f913b928e8ecc8fc56f2f315903a7f7df3296d19f1a1de698b5ec1d4eba07bc1b9743ec81f85b5a51686dae1ab6fe6c7c09502ba55bfaaa4030b793fb3391b2a15bb197f7bd2786b5739ed6a3744d8b0ad962d867023a82e489f459aa0924dc3096d38429075e00eb54a6d3f6967d11fc28eac0f3213db7ceaa63eba0a4373b42052246fec2890c6b9b5287cba43c75bc7f8c6b55ede6a262ebd04c89a28f80e70e01f258d7a5ed06cdb29437", TestName = "Enc 08")]
        [TestCase("497685804c16e0fe", "6143bc64d34ad6c2", "ec7a043eb0efa892", "bc32bb903780d76a", "118810e58cd62cbf", "66dd663ae22b8214", "dbad3de68ab61d93dbfbe6b15f16db40a4b00fdc65e93343fefaac122219e9cfd09ef32c8363458aaa70dfbd57d8960f3bdeae87d25caa6bdb6663030b2a58a0021a45dd7e4ef725cf235e758b29e463823cfd60f4f0ff3a023335e5632d2e7a586b5b80e23dda6b325c8c6261d06d45611125ef346ddab85ba9493e92eb1566bad85e9d17f99664bb63900b4297dabcc0a74dbcf89ae2eecf12c899002cb36a10a876bd854ad418537f93f89744d3d187449e50a940c0e344b4d97b15b8b0914224ca6794f73c90e0fabdb2c6a0ff8b9e314032b0271c9f", "55d36310e9926725512c7eca023bb5b013ed176b947c5d491cd3a6ffe9594a0d9c59836cdfef0f1a3361e3e842db36e5d61fd4c2e437bb5b53ad4e043b2975b86c352717a0b282172401235dfcb9b0ca5d611cb047a1b9a8d73e73bd440e775103e6f36336075031c1acc45659e37348290729e5563c1dee799ac114e3e8a8be36979b6e5bd1dd296cd5f45c019ac3a01536c28abdf54751d8ef56028438ec1f5a88226b71f60978b60f0d8738fe528c844d8e135146f8d30b470824141c8ddcf8faf1fdcdf14885ea7f81de65635577e6ebe99b8efaafbe", TestName = "Enc 09")]
        [TestCase("236edf3d0249291f", "f4cb57fde39e4ffd", "d6623d263deab6b6", "c943c42545505e53", "1e99197a9aa5b3a8", "73ee6ecfeffb08fd", "b52bb63f566bd2968e4dcffe803afcd22a096c333a7d5eab230ffd1071ee4aac5945569a95bcb4736f412e2b1b08b73549d0a1eefb6910389473af653268a1583eddbbe64204f082fa760c1aad2fa63cbdda4f7d7e50101b445b14e1c0bfa14b8c7b4deb044c6e0b5873d294dfb8b02faeafdfa96a3a469c5a4f944cc0fb31cf6aa77471849b1656b0c0e66159aabf5543d5b73a672f9a03ffd7976ddd25382a00ea983f69f9d0ab2be6b249c20dbaf7a5d641f81f38f4975a7c850dbd44a0a577cb211e5c6e8451f16c9c14c2ea885dfc3ae4ab375c3ca194c5c6f408605088f7d377d605031a9129da0e89034813cf", "ce1392eafa9c01cc20920e7525d3c2e0b011703227dbdeb827097c8b1728ba4ab400ea8bd035c2aad6dd608ce30ef37b5a03ccda9648c89192157a340ca617e8a4bb51f7f80cdfbbf53253790e2e767814794b5d38556b1af4835e12d3277b6a495bc17097afeceac40801618234c4fbc98d7b4665784e95de13afaf77a2fb2f380baf2204697db7891d4c9f488174595a092f153bcca389d40103f54effe25b30ea4698b08eda9da6854097eb67be1e631d8be2a557a3d7a03d8efa66d643c4a0196221e13829a8e4f21717087eff965fd77ec772b21acc11bdb8353aa3583ad2bab0bec245f48d5f385ed16d5037c4", TestName = "Enc 10")]
        public void ShouldEncryptSuccessfully(string _key1, string _key2, string _key3, string _iv1, string _iv2, string _iv3, string _pt, string _ct)
        {
            var key = new BitString(_key1 + _key2 + _key3);
            var iv1 = new BitString(_iv1);
            var iv2 = new BitString(_iv2);
            var iv3 = new BitString(_iv3);
            var plainText = new BitString(_pt);
            var cipherText = new BitString(_ct);

            var tdesCbi = new TdesCbci();

            var result = tdesCbi.BlockEncrypt(key, iv1, plainText);
            Assert.AreEqual(cipherText.ToHex(), result.Result.ToHex());
            Assert.AreEqual(iv2, result.IVs[1]);
            Assert.AreEqual(iv3, result.IVs[2]);
        }


        [Test]
        [TestCase("01fb8616c4d6b594", "041fcd7c2a16df97", "641fa88c490b5b61", "13849ebc1132de61", "68d9f411668833b6", "be2f4966bbdd890b", "bc77bd6bb9072fd0636dfd5a6a9ff6ae16896a320c52a96f", "b529c20640f654a89198eda87777e0580919310081a10580", TestName = "Dec 01")]
        [TestCase("379b020485e6c40d", "da07f8b9e96e5145", "b9a415df1fb64f0d", "7347af7ef02c2fb7", "c89d04d44581850c", "1df25a299ad6da61", "a73a5980ac9c72f96a6ff8d690cd8e9e8514d46f5a90ede52a4170a1bc08a17a3319a22adc1559ff6d97276be1765ae9", "24fd92aa5041b0cea53e042eaee410559e2c3628914d20be14335f71e82d523503e64a29d896eb6cd879d63239818517", TestName = "Dec 02")]
        [TestCase("68f2ae5ed94329fd", "23a129750b511ccd", "7c85a4805ee5a751", "14e052a90e4f2eda", "6a35a7fe63a4842f", "bf8afd53b8f9d984", "76c05ce721a17d9b19d94237de59e8ad4028f323aa29782c2b28875f1d0577dffb4d1f25eac2e9a11bf4b2e0e69d0f4ea9db5ff615bc7cf0da853baf27fd0600844b2d7b76bb5d4e", "e76486c2d6309193d03db878516771e19e304ee6fa1bd1d01b5583dbdf9a403a3c57d55c750ccd6e94f5872114e98cadde822016777e17ad7765eadb3d6c0a1ae19a74446a298610", TestName = "Dec 03")]
        [TestCase("438f5d083e987f1f", "57ab1368b31a8af2", "9d4f0815382aabdc", "b7639b2df884c44b", "0cb8f0834dda19a0", "620e45d8a32f6ef5", "61f83651bc0f380d8816f468abd2123585a9ace3cf8c2f8c27bc3dfa7b0426a1c2b04140aaf3dd352ef88cade6443b278effae354dfa545c6074664232cabb3f684d32b44cf0fbab36d3742c690a463b2453f7cab807c4c2cc9985830de465dc", "4b89a154f7c85427fd7c281ff726a574d05239af7b7a88b2e52703f92859bc1f012978a484ad06ed0e1cd08c7c32b0c29ad60542defb053857c4558ae0ebd75e9963c3dc983cf935dbc895e481fcc4343a18d702fd8b96c4f910d7cacd1e4fc4", TestName = "Dec 04")]
        [TestCase("153b079de519c1b3", "ada81a4a1cb3387c", "b60107b60dc79b8c", "a4145da78a08cac0", "f969b2fcdf5e2015", "4ebf085234b3756a", "45d7ec9757c21cbf64cd0d9f5ada24665317f27211c3d0ff5aca9c598009b9baf12caa2e8378d1e67854db97a7b94de0ff15979dd79635f1d8b4f0e815efcc259066bc2904c5791b5f47ca84d5062e04de0dab15b72aa74672719b80ba3d77c65c78088dd079d87522d29a3abc019cff0503943d1bf6e435", "809970b6f0cf7cc9550cc23a7688f011119d41abd8c3a156b9be121b62164edb05c8ae9e583b4a27e17562cc708ffd84ed66cf4253946081fd9f6b20216f84719a06fe8dea6b0cea7fe7262f3574af461d73d4b37d9db725173ccd4bae9b84e9c7bb2a2bad470a39b7cad80bcd204f7f292b18a95bc7ee6a", TestName = "Dec 05")]
        [TestCase("58fb3e5ef15404cd", "a2fb67382c019eea", "e9673425bc68f2e3", "0888b1effab948e2", "5dde0745500e9e37", "b3335c9aa563f38c", "f0cf05e7eecf82f2695e080cc8f92e4fa50c2132aeaa40f9805d96303f1daef4f9d3df15db66014a890cc13d786a4ae12d33686cbc2a9ec7faaa3c714c3935315f8eb3898743989928dad00a1be88c7252fa0ce1a45b13411b849a8cc2ab8d508bd7989b8a38bd2babcd9e1db48d72c968f887c07b27d835bba5f53c8061e4e1622023f58fad5f6b7fb3350ebd827f45", "6c63793343c8ca06b8de6abc129d06a07f4e50eb6292f4e8eea7ce56f4e75a0ef9916ce68ccc21d4d7e9155773e9d612813f99baf6d72c3336562cf6e5a478b6f9a8e543145234ae12df41aedd587c42895c9d989d20942eaeb4bf3733886040942e4e138461ebdc9147558af9f3e178c02ec54dff7714217f48f0e1869bfbf4f1ad0e1e83022ea57da9bbb36fc1ebfc", TestName = "Dec 06")]
        [TestCase("c825da86862f384f", "c483190e790ebf86", "d05d31f4d3e61308", "d7c0e92dd66c27f6", "2d163e832bc17d4b", "826b93d88116d2a0", "fe3baff0ebbb9c5941b23ea85cb4afc10321a55770d41474b5f59111a5215d6b333df4cf18ad05b4cb122d95b7eb1ff7b46e3458b8508c2220519cd2376af9111ff3ca05a5e3c40a008694f36169bf2522fbb897b2283e08f945b858fed7670ca77722f35ef2b2861953cdc749a952aeb6c545c490dca3c0778ead87f60e6b443357687df83703e9e8afb60f246834b0b5262b364d0e1a20ed7d0a007af48499c33fa27c5c4aa7d5", "f1c01aab4be072ba17d4d41e91b5845943b774e2d6aebacb29d142a1a0bec094bfbfe9d7f74ce34abfd1fa57e7b19419298a67c402bbe941c0230818db2c1c9388081a218c3b0af84e5abbfe3112b5ea206b6fa66b4ec2f8d1469e62de83fc477724134eb3b6cf0cecf77fdd16e0ce1250e3f452b9722d3a85c06a4750cb47f6b19a3e2913c31acdc031aeba3f24c6dae0795e8e952c124d031bd68fd90de7e961f20279556dd384", TestName = "Dec 07")]
        [TestCase("0bf875e3dc4f4a13", "4fe02526a1d9ae68", "fe37a408f846c116", "f389ea0bcc4904ed", "48df3f61219e5a42", "9e3494b676f3af97", "a31a93f9ba9bcc2a1548286edce4d23a84af39a594de123b0aac58a879ca4db76c6c5968edb1bba10087fd2ae17fabda8a14de167b2fc27fcbd5b759269382c14cc2a07f2fcc185bd2e3fc8a58661a4d6293e9b918625ab05dac76f06bd6d6468c80004c2ef97e3bbc5ec0c6a8659d88118d165125fdc32de3f262c52a61c7289056ea9c7bb9c5675da5498ef07b84ace6e8c7f6e88c79dd63335073100235757d5ab4abf86aeb4f02187e79cc63edf7ad332051fd3ea32c1bea2653abc67c06", "8627d8763df8c9bf4f37eaffe2c3b1a82f443640340f8965a84b490e34527213e05a77f0cc5591c6201656a245b48d0256334195d161144393ffd66d032156768dd87882520d887d1db0ce60991363afc29043469a72a2561d1384ab7641883073e604b437e857ee2f4f7bbf47a6dab85da363dcf50adca72fce7a4ff779af497ccf430fe3aea6213c398549b5369b240db3cade4cf06a3db279e1e1ed9373ca8fd95c1abe271c1c2db713864c8a4dfbbc0a9fd406edf3208c5ce0e9c0557eba", TestName = "Dec 08")]
        [TestCase("da203ebaabe3970d", "34a41a8c293176c1", "b30732ecfe38ae8a", "f55b4855228bd0b4", "4ab09daa77e12609", "a005f2ffcd367b5e", "dd70364bfe4a74b53c86bec115dc913c6b637a0ac0e544cec54829e1775e051777b24a2d2ee8bddb52f3fdaf8386b13c3c939d3341d038f4cdbb27edff9ea3217b371cfef3981f7fb1ef11c6f6a134f1b3ae67f57e33c0dd8e0ad70b9a9b9e6298efc45e23bc59ee584b0123b60e9eb5692eb1faaf8530b67da0b8e31ff90fc0657028e58c2ba0385feb6de288927b0d6615307b43abfd4a83a05938c67ade2a0e407b75409c7da176d7987c3c1e33d1edf3d242a854d557a84cd6c7def441755c5baa8b435db088b90126f00222fdda6202fe1dc450d754", "7dd880d2a9ab411c64f440d74f1b5055089a14825962cd69af7a70faceeafc0ac4d70a9b1befa55e53085d769003977f8ff727cfde8c21fb4da4eb9da041975586a3700ecfb0d383d99941014bbbb16e06c32b8a591692757470c27220cadbeaad82dbb42bb67393ddf01300ea09482a5647473c31c9cade0e251afeb74f6dd01fbd731398c82c974656fcfcd4b601bc65cba46cce6d6e3e020c1ecbcd96f80fc69b5fb57fb0a695fe11247c718a862b1d9769a298ca299e386df360cb6922b08866c82246348a98ec69b208294c7f7f65f2bf66f7a7a005", TestName = "Dec 09")]
        [TestCase("9ed620d0c7c176e6", "896758139e75761a", "5b1fc897ab250b10", "0b4a9aecde41a256", "609ff0423396f7ab", "b5f5459788ec4d00", "d70b1a18a96216fe225d42976f3a12d3ced4e850c504cda536c53476f2b736f62ad48f6a8e613c118b81ae965426c1783eab40ef13b37f211c60a1e88371359aa20f50bb2395c0188348f6153860976574bc85610cc9784cf949595cbe6fc069334ddda5704ac58108eeaa907a3d4402a8aa0c932405f83f5492c496260011ad394c8f153274005be6bb96c636bbc968b843b79ce7f5dcbf71eea32d63f1e4a58943cf77b2c7547f512c6c065e6bc4a2a4bac7fe435f6e6bbc8fefa2aa84ed457678d4c6a803c7dc0b64cafa841cf950818a7901aa67abcab1ab82ac10ce6ca091c02c83878c85177a8d88ccfb84b560", "b6c2424856bb10f3520f78cadf7273b1e08a1b2d5a98bc23285b2de3f0326164558039d16e549c45774acad4c7acedca02ddf23790f896ab4eb4c43e838b1ed3151bda9efdcccfe4f8b3cf027fb638b1faf1c6883159abc3039fe2425a58c0d55e5accb6e969d0573b13305ef0d87bee2f8e4029230423f3afe62ff85de06ef09806b7221c74c826aa3195f0005adf0a087c0721504125c3ba4f5567756d51ae2be745e87c34dedaacd7a4bf98838b8cef82c4789e58d9bc8ca3f9978845919680c51c12f3f33bfaa8cb08d3a19ca7fc4b6a1f37f79068658da9c6917fb15530fd68e4a768f7060e08d6673401ed5de3", TestName = "Dec 10")]

        public void ShouldDecryptSuccessfully(string _key1, string _key2, string _key3, string _iv1, string _iv2, string _iv3, string _pt, string _ct)
        {
            var key = new BitString(_key1 + _key2 + _key3);
            var iv1 = new BitString(_iv1);
            var iv2 = new BitString(_iv2);
            var iv3 = new BitString(_iv3);
            var plainText = new BitString(_pt);
            var cipherText = new BitString(_ct);

            var tdesCbi = new TdesCbci();

            var result = tdesCbi.BlockDecrypt(key, iv1, cipherText);
            Assert.AreEqual(plainText.ToHex(), result.Result.ToHex());
            Assert.AreEqual(iv2, result.IVs[1]);
            Assert.AreEqual(iv3, result.IVs[2]);
        }

        // TODO better name?
        [Test]
        [TestCase("1046913489980131", "0000000000000000", "5555555555555555", "aaaaaaaaaaaaaaaa", "000000000000000000000000000000000000000000000000", "88d55e54f54c97b423c25ab3e19b6b94e5b490db69b0f2ec")]
        public void MonkeyEncrypt(string _key, string _iv1, string _iv2, string _iv3, string _pt, string _ct)
        {
            var key = new BitString(_key);
            var iv1 = new BitString(_iv1);
            var plainText = new BitString(_pt);

            var expectedIv2 = new BitString(_iv2);
            var expectedIv3 = new BitString(_iv3);
            var expectedCipherText = new BitString(_ct);

            var tdesCbi = new TdesCbci();

            var result = tdesCbi.BlockEncrypt(key, iv1, plainText);

            Assert.AreEqual(result.IVs[1], expectedIv2);
            Assert.AreEqual(result.IVs[2], expectedIv3);
            Assert.AreEqual(result.Result, expectedCipherText);

        }

        // TODO better name?
        public void MonkeyDecrypt(string _key, string _iv1, string _iv2, string _iv3, string _pt, string _ct)
        {
            var key = new BitString(_key);
            var iv1 = new BitString(_iv1);
            var expectedIv2 = new BitString(_iv2);
            var expectedIv3 = new BitString(_iv3);
            var cipherText = new BitString(_ct);
            var expectedPlainText = new BitString(_pt);

            var tdesCbi = new TdesCbci();

            var result = tdesCbi.BlockDecrypt(key, iv1, cipherText);

            Assert.AreEqual(result.IVs[1], expectedIv2);
            Assert.AreEqual(result.IVs[2], expectedIv3);
            Assert.AreEqual(result.Result, expectedPlainText);

        }

    }



}
