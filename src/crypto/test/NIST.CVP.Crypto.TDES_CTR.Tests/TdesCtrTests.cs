using System.Collections.Generic;
using Moq;
using NIST.CVP.Crypto.Common.Symmetric;
using NIST.CVP.Crypto.Common.Symmetric.BlockModes;
using NIST.CVP.Crypto.Common.Symmetric.CTR.Fakes;
using NIST.CVP.Crypto.Common.Symmetric.Enums;
using NIST.CVP.Crypto.Symmetric.BlockModes;
using NIST.CVP.Crypto.Symmetric.Engines;
using NIST.CVP.Math;
using NUnit.Framework;
using NIST.CVP.Tests.Core.TestCategoryAttributes;

namespace NIST.CVP.Crypto.TDES_CTR.Tests
{
    [TestFixture, FastCryptoTest]
    public class TdesCtrTests
    {
        private Mock<ICounter> _mockCounter;
        private CtrBlockCipher _subject;

        [SetUp]
        public void Setup()
        {
            _mockCounter = new Mock<ICounter>();
            _subject = new CtrBlockCipher(new TdesEngine(), _mockCounter.Object);
        }

        [Test]
        [TestCase("0101010101010101",
            "8000000000000000",
            "0000000000000000",
            "95f8a5e5dd31d900",
            TestName = "TDES_CTR - Encrypt NewEngine")]
        public void ShouldEncryptCorrectlyNewEngine(string keyHex, string ivHex, string ptHex, string ctHex)
        {
            var key = new BitString(keyHex);
            var iv = new BitString(ivHex);
            var pt = new BitString(ptHex);
            var ct = new BitString(ctHex);

            _mockCounter.Setup(s => s.GetNextIV()).Returns(iv);

            var param = new ModeBlockCipherParameters(
                BlockCipherDirections.Encrypt,
                key,
                pt
            );
            var result = _subject.ProcessPayload(param);

            Assert.IsTrue(result.Success);
            Assert.AreEqual(ct, result.Result);
        }

        [Test]
        [TestCase("0101010101010101",
            "8000000000000000",
            "000000000000",
            "95f8a5e5dd20",
            43,
            TestName = "TDES_CTR - Encrypt Partial NewEngine")]
        public void ShouldEncryptPartialBlockCorrectlyNewEngine(string keyHex, string ivHex, string ptHex, string ctHex,
            int length)
        {
            var key = new BitString(keyHex);
            var iv = new BitString(ivHex);
            var pt = new BitString(ptHex, length);
            var ct = new BitString(ctHex, length);

            _mockCounter.Setup(s => s.GetNextIV()).Returns(iv);

            var param = new ModeBlockCipherParameters(
                BlockCipherDirections.Encrypt,
                key,
                pt
            );
            var result = _subject.ProcessPayload(param);

            Assert.IsTrue(result.Success);
            Assert.AreEqual(ct, result.Result);
        }

        [Test]
        [TestCase("0101010101010101",
            "8000000000000000",
            "95f8a5e5dd31d900",
            "0000000000000000",
            TestName = "TDES_CTR - Decrypt NewEngine")]
        public void ShouldDecryptCorrectlyNewEngine(string keyHex, string ivHex, string ctHex, string ptHex)
        {
            var key = new BitString(keyHex);
            var iv = new BitString(ivHex);
            var ct = new BitString(ctHex);
            var pt = new BitString(ptHex);

            _mockCounter.Setup(s => s.GetNextIV()).Returns(iv);

            var param = new ModeBlockCipherParameters(
                BlockCipherDirections.Decrypt,
                key,
                ct
            );
            var result = _subject.ProcessPayload(param);

            Assert.IsTrue(result.Success);
            Assert.AreEqual(pt, result.Result);
        }

        [Test]
        [TestCase("8F8089F28CF2F7E9DFC1205B7634A49E29F1D0EC1CC8629E",
           "0A4F1F67B9B117E3136A9E73E80037001527D6F80A22CFBA3FF1FA71749F622CF571F4C3F40B10B5B92B7D47EEE3912362448C7FF6590FFE131372CA67D10E90B18D5779249A45A1A7CC511921E3CDB1BB6142823014B94CEA185E39ADB8820B459E2ABC954C85A5C7BC93AFA5FA17724C1F83E9DC532FDC49ECC6A93F0C5E3B7CF71339551AD13F4A1FD65FF00339B1C29E460BF4FE0359D780D6668BD0C49D1C84B3DFABD910922B77E7E0AC075D2053527904A97BC02FD6BF1266ACFCB732FF82674E238D033CA2F086B52DD918EAE783634202C31F83D2D76CAE16B382B12D15BAC4F244A4B6957CC8C9FF9306426D291A2FADE448B9475992C84398B96BB98548341C851301B311274A7D67DD659FAF47CF1F3C377549D64A064657C7BCC74531DCF8A5F2B5F8396CE55A91909260D9200B5580B0EB6241DA0F3B0C3B1FF681DC0DF93E3FBFBB9D50D02799B723E685128277BE3EA4532A1A3865AE524809937E11B57617735C98CA932504157D7940BD8D5545B37592918311B19B58853075D43D173163A31368C72B33D136D73CCCD3BE3483BEDDD19642181A2BDB23C3FD645BDB52494DFEF2101322840BD5AA9D3C8CBE1B8395D0AF8F607F6196247CEAAF3EA7E075795892D9B7198F8D60F6C17AB04F570D723C0B3B50CBA2E0D7AA2AA2B0E50197254E8CE4CC8DBFA10C005A025F38404E1E9A95403E05C3053C5F6777BB9B8DBBF921B3F09E76A8077C4A4113D1DE3F3E21E53E3EA0FBB9D83E2B5A75953CEC4E142BE19F7761345DD9363BF7DE013097D4FCB4A7E9A2E7DAC02A52D2D3823DB8421F150175143AD58D28E088D5790290FD2DF7D3F42F6E292D57B3B137C185BABE1171E1922EC4CCD0A8D657CB153273DC8A93583CFCC9B301A8303AE00B7E6380AC9D08EDDF1B918633CFBEE26FD15E9293BDB62505665C195EC0ADC04BFF9F66B9C79D73C4079940B95EA358E312C156F085E0AAE51D474A11CDF5785B4AE4D728A1F531284E1873679B434CB06DE75439090A2FD6C808AFF8C5C2DD7B01DCFCAA54C6CA67FB5FFBB5B773EECD3F10D3AA707A37478F2BEE6C5C2C8749CD2ADB8A108CC04091C5B34152BF02B6750C254D0CABA6DC660C37",
           "5759DBD8E29E8E689C9EEDDD0D619E617D6F0119AF79F46BB1D81A9DE88116AC682CA3E49CE9637E1757B14B0715EB9877F7C0D820B990C4669DA3EC91E0AA75AC7BF4E12E94359AD42C225BBF76ADBCEA8990AECA7EF5AE04DDA57398EA269144FA72DE8122B6BB6FEFD1D90F2CC4C77D821ABF2C7C0EF058A0F024FD6051872525FC1EC35662AAE5E77E75B9899CE6B942B5FD00A5C25CC201859D99634E0CCA5F01545F3CD3345715D1F6752EF2BBA3D2EF299F6294ED483D62A87F1AAFD0B54DD55B0D5DB01DAA04437D30DA1E2BE56B0E605A32EAA2E9B4BD82DEFB1FA16719F6322188A8A12BE10115D229BC01CA387836A009D5E2EC1AD1E8DFCDBBFD1D29D8EBA31229A810FF0096C50D4F872B8A46313C4AD1D45446786DD33C9F7CBC44D41EACBF1FABAC38A612B6C3A045C88CC564286964741CBF728D62AD15C1AC9403A03DFC7F7C9F8D04E3B8E4B97D63671DBB0479AFF953185A499E6B0FBEC0BB32DF15822FC1194230F0EE9642B12A1BBD7670908219C7C9E86E68CBC70C1DA7D505E53D7E574CB69C3523EAEE11D574B9B2B33AA21E04285B6210DDA2686B5C26C7E069E896CC64624C8A367314446E7C13ED13D1059AA804CBD10E6F9399065248F83353889FB49737E3BD8C0C31C8734211EEF92009268A24E805C031D15D3AD0145ACF7E277E62BC098D58063694967D15851337DA4288183BA5AD477D4BDA077E71BB4B2C457DDD17AC3AEC6A4941000380C8F1BADDDF0D9B4A294873549B481D99C7376EEE4C3D398E5CCA44E89C9483548901F1600137909A2055E6F3AB8E3FD6CC0B861C704F3FADB16E8E44F2BB68EB01357B5F86B4F9D5AEEEC7C6BB8A8E21476D5E1FB5952720FD385D18AA079151EF1ADFC0777E9A8686F4694F20006E90972E0678D321A8F3A16D9190FE619C5439742D094F43B9AC78BE062D71D27210C330721EF19A371C317C124DCF740690B3A4B6BD42FCAFC6D806B72B2F2BFB2C8416394F584C9B2140B6020585905271D5351276D00DF8E7DC8B0BA4CA58B42EA3B74AC234F1C3BFAB38869A0440A1173426583F9780701B93999CE05A4D7C616C692E0B96128F1EEE3803D91745CDC18CE21E328BE51E297FD5",
           "0000000000000037",
            TestName = "TDES_CTR - Counter - Encrypt")]
        public void ShouldFindIVsEncrypt(string keyHex, string ptHex, string ctHex, string iv)
        {
            var key = new BitString(keyHex);
            var pt = new BitString(ptHex);
            var ct = new BitString(ctHex);
            string[] ivsarray = {
            "0000000000000037",
            "0000000000000036",
            "0000000000000035",
            "0000000000000034",
            "0000000000000033",
            "0000000000000032",
            "0000000000000031",
            "0000000000000030",
            "000000000000002F",
            "000000000000002E",
            "000000000000002D",
            "000000000000002C",
            "000000000000002B",
            "000000000000002A",
            "0000000000000029",
            "0000000000000028",
            "0000000000000027",
            "0000000000000026",
            "0000000000000025",
            "0000000000000024",
            "0000000000000023",
            "0000000000000022",
            "0000000000000021",
            "0000000000000020",
            "000000000000001F",
            "000000000000001E",
            "000000000000001D",
            "000000000000001C",
            "000000000000001B",
            "000000000000001A",
            "0000000000000019",
            "0000000000000018",
            "0000000000000017",
            "0000000000000016",
            "0000000000000015",
            "0000000000000014",
            "0000000000000013",
            "0000000000000012",
            "0000000000000011",
            "0000000000000010",
            "000000000000000F",
            "000000000000000E",
            "000000000000000D",
            "000000000000000C",
            "000000000000000B",
            "000000000000000A",
            "0000000000000009",
            "0000000000000008",
            "0000000000000007",
            "0000000000000006",
            "0000000000000005",
            "0000000000000004",
            "0000000000000003",
            "0000000000000002",
            "0000000000000001",
            "0000000000000000",
            "FFFFFFFFFFFFFFFF",
            "FFFFFFFFFFFFFFFE",
            "FFFFFFFFFFFFFFFD",
            "FFFFFFFFFFFFFFFC",
            "FFFFFFFFFFFFFFFB",
            "FFFFFFFFFFFFFFFA",
            "FFFFFFFFFFFFFFF9",
            "FFFFFFFFFFFFFFF8",
            "FFFFFFFFFFFFFFF7",
            "FFFFFFFFFFFFFFF6",
            "FFFFFFFFFFFFFFF5",
            "FFFFFFFFFFFFFFF4",
            "FFFFFFFFFFFFFFF3",
            "FFFFFFFFFFFFFFF2",
            "FFFFFFFFFFFFFFF1",
            "FFFFFFFFFFFFFFF0",
            "FFFFFFFFFFFFFFEF",
            "FFFFFFFFFFFFFFEE",
            "FFFFFFFFFFFFFFED",
            "FFFFFFFFFFFFFFEC",
            "FFFFFFFFFFFFFFEB",
            "FFFFFFFFFFFFFFEA",
            "FFFFFFFFFFFFFFE9",
            "FFFFFFFFFFFFFFE8",
            "FFFFFFFFFFFFFFE7",
            "FFFFFFFFFFFFFFE6",
            "FFFFFFFFFFFFFFE5",
            "FFFFFFFFFFFFFFE4",
            "FFFFFFFFFFFFFFE3",
            "FFFFFFFFFFFFFFE2",
            "FFFFFFFFFFFFFFE1",
            "FFFFFFFFFFFFFFE0",
            "FFFFFFFFFFFFFFDF",
            "FFFFFFFFFFFFFFDE",
            "FFFFFFFFFFFFFFDD",
            "FFFFFFFFFFFFFFDC",
            "FFFFFFFFFFFFFFDB",
            "FFFFFFFFFFFFFFDA",
            "FFFFFFFFFFFFFFD9",
            "FFFFFFFFFFFFFFD8",
            "FFFFFFFFFFFFFFD7",
            "FFFFFFFFFFFFFFD6",
            "FFFFFFFFFFFFFFD5",
            "FFFFFFFFFFFFFFD4"};

            var ivsCorrect = new List<BitString>();
            foreach (var ivgiven in ivsarray)
            {
                ivsCorrect.Add(new BitString(ivgiven));
            }

            _subject = new CtrBlockCipher(new TdesEngine(), new TestableCounter(new TdesEngine(), ivsCorrect));

            var param = new CounterModeBlockCipherParameters(BlockCipherDirections.Encrypt, key, pt, ct);
            var result = _subject.ExtractIvs(param);

            Assert.AreEqual(ivsCorrect, result.IVs);
        }

        [Test]
        [TestCase("D39ED0F257548A4929A8D67FE9166E46F104C1DCE9BF3843",
           "805F2945EA1ACECA88BECF4DD1047E207058E16982F145AD96725CB9B8561FA1ECA1F8D574FBA10A11586F2EC405BA4DBE7A33076024E479349E408B25DF23F8EC94528B523D9AA35F428E676A794CD7FE8299DC4E0C363F2C4A120F9F014DA0C0DAA810DCB8CF58568114966411C346ADE08C7380E3D295A52F432295F12574D9F3792DC0FAB78AF519C021A2DB6F706CA700C47527933908690B9442C57216A2B672D3822FEEAEA4029A131DDAFEB0C486E70707C82B4CC6FB5DAFA85C8C902DDDFBA18C33F654AF088CA1735A346618B3F1CF559FF49E58FE0779839DB731A30E6E51401764B5563DA7FC66834ACD74E14D608E309E9B2E3CB8F0E84D915604F325BE27A94765137FFFF43B23DB10EFF0C615F4BC25C8CC96FA887D78355531E31F429439BD3AF6411CB3F86B3229C435681EA2C33A2336B9F8E5E33EA73033F85F6E4CA046570E69D82FDF5B82C57BDEC624A8684E91516BE2DA91CBA4CF70FC0F7A30AE088B5A1186F1558B8F18948AB1880E182C4373901C542BA069945A2EBA6F74164F2D66D53CD4ACC2226DC00E7BFB60FEFE2B6B849180DB6F6096E632B377F94F270F8512870C4397C70411F7C38C374FC70EA6B4BF9B26D53FEDE1806C73C73465849BB34A280DA4E02A1FB7561B5C421752A67AAC5ED4C2C2D03A94B024C2E7BC681320CF4EA16D895213935DE9A57A8292A42E5A839C78A46A01EC9697F6F3BE7DA0FC96DFD4BB8101FE48D7792CC4BCD02BA71780645D64A9FFA40A236E889BEA0C8AAD624BAE39BCAFBFE10022A40E0B0F051F91DECA074E5EE18D0E7730C0DF49F91D3BD0CCD54B38F64B6CACC28B8CB281532F68E4E42AC67E2E21F972B2FA2B8DC3AD31C08D63348776C3F5CECC8C0286802A2AEC6D0CA74FFC5D2F0AD2AFB9403A794F8D1332AB7E1BD5F18B7AC2DB5D2BCC216B3B6607123B45F339E1505D674E6F90A8EA2E52A1956653741EE294EF97115A2F1608B0CB2239BB66D441E56F4A0F6E0EB1736E86FC3774EB31294BF7ABC77BC6BFA777BD7E421B59B44ED80952849D6AD93FB612D71AD78DC52E0D3D9370B4AD4B37F4E77A474E688546A0D3C4391A3F67DF675F74C7FDB38FF104CCABA1A054219D",

           "0000000000000021",
            TestName = "AES_CTR - Counter - Decrypt")]
        public void ShouldFindIVsDecrypt(string keyHex, string ctHex, string ptHex, string iv)
        {
            var key = new BitString(keyHex);
            var pt = new BitString(ptHex);
            var ct = new BitString(ctHex);
            string[] ivsarray = {
            "0000000000000021",
            "0000000000000020",
            "000000000000001F",
            "000000000000001E",
            "000000000000001D",
            "000000000000001C",
            "000000000000001B",
            "000000000000001A",
            "0000000000000019",
            "0000000000000018",
            "0000000000000017",
            "0000000000000016",
            "0000000000000015",
            "0000000000000014",
            "0000000000000013",
            "0000000000000012",
            "0000000000000011",
            "0000000000000010",
            "000000000000000F",
            "000000000000000E",
            "000000000000000D",
            "000000000000000C",
            "000000000000000B",
            "000000000000000A",
            "0000000000000009",
            "0000000000000008",
            "0000000000000007",
            "0000000000000006",
            "0000000000000005",
            "0000000000000004",
            "0000000000000003",
            "0000000000000002",
            "0000000000000001",
            "0000000000000000",
            "FFFFFFFFFFFFFFFF",
            "FFFFFFFFFFFFFFFE",
            "FFFFFFFFFFFFFFFD",
            "FFFFFFFFFFFFFFFC",
            "FFFFFFFFFFFFFFFB",
            "FFFFFFFFFFFFFFFA",
            "FFFFFFFFFFFFFFF9",
            "FFFFFFFFFFFFFFF8",
            "FFFFFFFFFFFFFFF7",
            "FFFFFFFFFFFFFFF6",
            "FFFFFFFFFFFFFFF5",
            "FFFFFFFFFFFFFFF4",
            "FFFFFFFFFFFFFFF3",
            "FFFFFFFFFFFFFFF2",
            "FFFFFFFFFFFFFFF1",
            "FFFFFFFFFFFFFFF0",
            "FFFFFFFFFFFFFFEF",
            "FFFFFFFFFFFFFFEE",
            "FFFFFFFFFFFFFFED",
            "FFFFFFFFFFFFFFEC",
            "FFFFFFFFFFFFFFEB",
            "FFFFFFFFFFFFFFEA",
            "FFFFFFFFFFFFFFE9",
            "FFFFFFFFFFFFFFE8",
            "FFFFFFFFFFFFFFE7",
            "FFFFFFFFFFFFFFE6",
            "FFFFFFFFFFFFFFE5",
            "FFFFFFFFFFFFFFE4",
            "FFFFFFFFFFFFFFE3",
            "FFFFFFFFFFFFFFE2",
            "FFFFFFFFFFFFFFE1",
            "FFFFFFFFFFFFFFE0",
            "FFFFFFFFFFFFFFDF",
            "FFFFFFFFFFFFFFDE",
            "FFFFFFFFFFFFFFDD",
            "FFFFFFFFFFFFFFDC",
            "FFFFFFFFFFFFFFDB",
            "FFFFFFFFFFFFFFDA",
            "FFFFFFFFFFFFFFD9",
            "FFFFFFFFFFFFFFD8",
            "FFFFFFFFFFFFFFD7",
            "FFFFFFFFFFFFFFD6",
            "FFFFFFFFFFFFFFD5",
            "FFFFFFFFFFFFFFD4",
            "FFFFFFFFFFFFFFD3",
            "FFFFFFFFFFFFFFD2",
            "FFFFFFFFFFFFFFD1",
            "FFFFFFFFFFFFFFD0",
            "FFFFFFFFFFFFFFCF",
            "FFFFFFFFFFFFFFCE",
            "FFFFFFFFFFFFFFCD",
            "FFFFFFFFFFFFFFCC",
            "FFFFFFFFFFFFFFCB",
            "FFFFFFFFFFFFFFCA",
            "FFFFFFFFFFFFFFC9",
            "FFFFFFFFFFFFFFC8",
            "FFFFFFFFFFFFFFC7",
            "FFFFFFFFFFFFFFC6",
            "FFFFFFFFFFFFFFC5",
            "FFFFFFFFFFFFFFC4",
            "FFFFFFFFFFFFFFC3",
            "FFFFFFFFFFFFFFC2",
            "FFFFFFFFFFFFFFC1",
            "FFFFFFFFFFFFFFC0",
            "FFFFFFFFFFFFFFBF",
            "FFFFFFFFFFFFFFBE"};

            var ivsCorrect = new List<BitString>();
            foreach (var ivgiven in ivsarray)
            {
                ivsCorrect.Add(new BitString(ivgiven));
            }

            _subject = new CtrBlockCipher(new TdesEngine(), new TestableCounter(new TdesEngine(), ivsCorrect));

            var param = new CounterModeBlockCipherParameters(BlockCipherDirections.Encrypt, key, pt, ct);
            var result = _subject.ExtractIvs(param);

            Assert.AreEqual(ivsCorrect, result.IVs);
        }
    }
}
