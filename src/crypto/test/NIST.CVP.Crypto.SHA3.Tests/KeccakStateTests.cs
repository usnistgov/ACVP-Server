using NIST.CVP.Math;
using NIST.CVP.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.Crypto.SHA3.Tests
{
    [TestFixture, FastCryptoTest]
    public class KeccakStateTests
    {
        // Not all of these are necessary, only 800/1600 will ever be used
        private static object[] testCases =
        {
            new object[] { 25, 1, 0 },
            new object[] { 50, 2, 1 },
            new object[] { 100, 4, 2 },
            new object[] { 200, 8, 3 },
            new object[] { 400, 16, 4 },
            new object[] { 800, 32, 5 },
            new object[] { 1600, 64, 6 }
        };

        #region Creating KeccakStates
        [Test]
        [TestCaseSource(nameof(testCases))]
        public void ShouldCreateAKeccakStateStructureOfProperSize(int b, int Width, int L)
        {
            var message = new BitString(b);
            var subject = new KeccakState(message, b);

            Assert.AreEqual(Width, subject.Width);
            Assert.AreEqual(L, subject.L);
        }

        [Test]
        [TestCaseSource(nameof(testCases))]
        public void ShouldCreateAKeccakStateWithEmptyContent(int b, int Width, int L)
        {
            var message = new BitString(b);
            var subject = new KeccakState(message, b);

            for (var i = 0; i < 5; i++)
            {
                for (var j = 0; j < 5; j++)
                {
                    for (var k = 0; k < Width; k++)
                    {
                        Assert.AreEqual(false, subject.GetBit(i, j, k));
                    }
                }
            }
        }

        [Test]
        [TestCaseSource(nameof(testCases))]
        public void ShouldConvertToBitString(int b, int Width, int L)
        {
            var randy = new Random800_90();
            var stateBitString = randy.GetRandomBitString(b);
            var state = new KeccakState(stateBitString, b);

            Assert.AreEqual(stateBitString, state.ToBitString());
        }
        #endregion Creating KeccakStates

        #region Getters and Setters
        /*[Test]
        [TestCaseSource(nameof(testCases))]
        public void ShouldSetAndGetProperLane(int b, int Width, int L)
        {
            var randy = new Random800_90();
            var stateBitString = randy.GetRandomBitString(b);
            var subject = new KeccakState(stateBitString, b);

            for (var i = 0; i < 5; i++)
            {
                for (var j = 0; j < 5; j++)
                {
                    var newLane = randy.GetRandomBitString(b);
                    subject.SetLane(i, j, newLane);

                    Assert.AreEqual(newLane.ToHex(), subject.GetLane(i, j).ToHex());
                }
            }
        }*/
        #endregion Getters and Setters

        #region Transformation Functions
        [Test]
        [TestCase
        [TestCase("9A18630102D0E184AC26A08AB9004F228F86811306AEA0BD1738E284AB404DC0B4868113942E0259F0CE0C22C25109026E0DE041278D8F0C11D20219C08A020200094021227187CC8F1ABE5BC5860A40AE492E9600FE0102001E413CAE00B890C9000234240F015862527886BAF0EC8205056148BA055448E4C0A0C88C9BD00560001D6090E9393E1841A0182A012904800008B478F3D0A91C851504A60028B655F54E3400592A080C42848203B000D559906E2C010D3A08C2658492006C18C74E9218AC02A80017", "AA7900820B7C16DEF48690D767F23C7C4EFDB50C33C63D29D8A10ADEFD6D15CB68D48885470ACBABC0AF6FA1CBFDFE5836ADD01CF97FFC52D0A93606F5E29F96CF90A87B745CDFC75348B7CD16A2C3B29E284D150952F65858BE716170F2CBCE087B362B11679CCCADCB90DCECDDB489D95768DE69219DBAD4A1C34B8537275F38A02D3D4E1B4A60D93A94071F69B4904F99E0EE2EDE88A2C0D71C927524E14465942DB709F5DD5254E2B4DFDD42738B98EB5A333465A79C0DFC6CC8564140CC92C0113AD18CC9E5")]
        public void ShouldPerformTransformationFunctionTheta(string input, string expectedOutput)
        {
            var inputState = new BitString(input);
            var subject = new KeccakState(inputState, 1600);

            var expectedResult = new BitString(expectedOutput);

            var result = subject.Theta();

            Assert.AreEqual(expectedResult.ToHex(), result.ToBitString().ToHex());
        }

        [Test]
        [TestCase
        [TestCase("AA7900820B7C16DEF48690D767F23C7C4EFDB50C33C63D29D8A10ADEFD6D15CB68D48885470ACBABC0AF6FA1CBFDFE5836ADD01CF97FFC52D0A93606F5E29F96CF90A87B745CDFC75348B7CD16A2C3B29E284D150952F65858BE716170F2CBCE087B362B11679CCCADCB90DCECDDB489D95768DE69219DBAD4A1C34B8537275F38A02D3D4E1B4A60D93A94071F69B4904F99E0EE2EDE88A2C0D71C927524E14465942DB709F5DD5254E2B4DFDD42738B98EB5A333465A79C0DFC6CC8564140CC92C0113AD18CC9E5", "AA7900820B7C16DEE80D21AFCFE479F8537F2DC38C714F8ADF56B18C1DAAE0DD52585E45A3462C3CBADCEF8F05FCFA16CD91FFC72F65D30A2574AA8D41BDF8A748D43D3AAEEFE3673A2C3B8574DB6C21F24469AA4890B2C73B63F9C685C1C92F598938E36446D8B3BB69135B9721B9D9EFB4904EDDEC2B34970A6F4EBEA84387A5C76943090C07B45AC86C1DCA838F341B51F42913DCDDC544C0D71C927524E1774B9551B6DC26D45289D37E770BCD2D735D6B86A6EC9413FC6CC8564140CC0D72B92470844E3463")]
        public void ShouldPerformTransformationFunctionRho(string input, string expectedOutput)
        {
            var inputState = new BitString(input);
            var subject = new KeccakState(inputState, 1600);

            var expectedResult = new BitString(expectedOutput);

            var result = subject.Rho();

            Assert.AreEqual(expectedResult.ToHex(), result.ToBitString().ToHex());
        }

        [Test]
        [TestCase
        [TestCase("AA7900820B7C16DEE80D21AFCFE479F8537F2DC38C714F8ADF56B18C1DAAE0DD52585E45A3462C3CBADCEF8F05FCFA16CD91FFC72F65D30A2574AA8D41BDF8A748D43D3AAEEFE3673A2C3B8574DB6C21F24469AA4890B2C73B63F9C685C1C92F598938E36446D8B3BB69135B9721B9D9EFB4904EDDEC2B34970A6F4EBEA84387A5C76943090C07B45AC86C1DCA838F341B51F42913DCDDC544C0D71C927524E1774B9551B6DC26D45289D37E770BCD2D735D6B86A6EC9413FC6CC8564140CC0D72B92470844E3463", "AA7900820B7C16DECD91FFC72F65D30A598938E36446D8B31B51F42913DCDDC572B92470844E3463DF56B18C1DAAE0DD3A2C3B8574DB6C21F24469AA4890B2C7A5C76943090C07B4735D6B86A6EC9413E80D21AFCFE479F82574AA8D41BDF8A7BB69135B9721B9D944C0D71C927524E1774B9551B6DC26D452585E45A3462C3CBADCEF8F05FCFA163B63F9C685C1C92F5AC86C1DCA838F34FC6CC8564140CC0D537F2DC38C714F8A48D43D3AAEEFE367EFB4904EDDEC2B34970A6F4EBEA843875289D37E770BCD2D")]
        public void ShouldPerformTransformationFunctionPi(string input, string expectedOutput)
        {
            var inputState = new BitString(input);
            var subject = new KeccakState(inputState, 1600);

            var expectedResult = new BitString(expectedOutput);

            var result = subject.Pi();

            Assert.AreEqual(expectedResult.ToHex(), result.ToBitString().ToHex());
        }

        [Test]
        [TestCase
        [TestCase("AA7900820B7C16DECD91FFC72F65D30A598938E36446D8B31B51F42913DCDDC572B92470844E3463DF56B18C1DAAE0DD3A2C3B8574DB6C21F24469AA4890B2C7A5C76943090C07B4735D6B86A6EC9413E80D21AFCFE479F82574AA8D41BDF8A7BB69135B9721B9D944C0D71C927524E1774B9551B6DC26D452585E45A3462C3CBADCEF8F05FCFA163B63F9C685C1C92F5AC86C1DCA838F34FC6CC8564140CC0D537F2DC38C714F8A48D43D3AAEEFE367EFB4904EDDEC2B34970A6F4EBEA843875289D37E770BCD2D", "BA7100A24B7E1E6FCFC13BCF3CFDD64E392138B3E044F8919311F4AB18ECDF593739DB35A04FF5631F16F1A615AA721B3FAF3BC475D76911A05C6B2EEE7022C429C5F94B100E677853756187C6BD9833720430FD59E478A061F46E8941E9FC878862131AB3A9BBCDCCC4F7B2DB557DC9723B1F51B6C5A6D3537B4E0523472D15FA54EB964FFEFC069F4779848481892658D87A1C6885AF0454E869DC45F81E0FF45FAD87DD71479A58DE523A8CEFA3E4AF35007E9CEFA71C967C43CF36D841055A09C34655856D48")]
        public void ShouldPerformTransformationFunctionChi(string input, string expectedOutput)
        {
            var inputState = new BitString(input);
            var subject = new KeccakState(inputState, 1600);

            var expectedResult = new BitString(expectedOutput);

            var result = subject.Chi();

            Assert.AreEqual(expectedResult.ToHex(), result.ToBitString().ToHex());
        }

        [Test]
        [TestCase
        [TestCase
        [TestCase(2, "BA7100A24B7E1E6FCFC13BCF3CFDD64E392138B3E044F8919311F4AB18ECDF593739DB35A04FF5631F16F1A615AA721B3FAF3BC475D76911A05C6B2EEE7022C429C5F94B100E677853756187C6BD9833720430FD59E478A061F46E8941E9FC878862131AB3A9BBCDCCC4F7B2DB557DC9723B1F51B6C5A6D3537B4E0523472D15FA54EB964FFEFC069F4779848481892658D87A1C6885AF0454E869DC45F81E0FF45FAD87DD71479A58DE523A8CEFA3E4AF35007E9CEFA71C967C43CF36D841055A09C34655856D48", "30F100A24B7E1EEFCFC13BCF3CFDD64E392138B3E044F8919311F4AB18ECDF593739DB35A04FF5631F16F1A615AA721B3FAF3BC475D76911A05C6B2EEE7022C429C5F94B100E677853756187C6BD9833720430FD59E478A061F46E8941E9FC878862131AB3A9BBCDCCC4F7B2DB557DC9723B1F51B6C5A6D3537B4E0523472D15FA54EB964FFEFC069F4779848481892658D87A1C6885AF0454E869DC45F81E0FF45FAD87DD71479A58DE523A8CEFA3E4AF35007E9CEFA71C967C43CF36D841055A09C34655856D48")]
        [TestCase(23, "63CE03C23667DB373B6E15454F0EB1ABD4597F9A1B078E3F5B5A6BC76DB1CD4FA555EB6E33A211E040FC205BC618F503EA9135F2E7C6E45A5AADB357D5314CA8FDC823D216098AF3D2C09A55DFC19D2578C7C2A328C415700136BB3E28CCCC067C8B278FE95F4187D926B5087BFBCD512F5F75FDF7AEB3A082B76083207352E8CCA95DE8E8FE88379DFD89A3A312E6222018873BDE70067DFE47858F69F877587E7F5EED8A7A3F6ED24134C86BEBB1F926CF6879F41356EAE44D40BF1038E7FBE46256698C4682E1", "6B4E03423667DBB73B6E15454F0EB1ABD4597F9A1B078E3F5B5A6BC76DB1CD4FA555EB6E33A211E040FC205BC618F503EA9135F2E7C6E45A5AADB357D5314CA8FDC823D216098AF3D2C09A55DFC19D2578C7C2A328C415700136BB3E28CCCC067C8B278FE95F4187D926B5087BFBCD512F5F75FDF7AEB3A082B76083207352E8CCA95DE8E8FE88379DFD89A3A312E6222018873BDE70067DFE47858F69F877587E7F5EED8A7A3F6ED24134C86BEBB1F926CF6879F41356EAE44D40BF1038E7FBE46256698C4682E1")]
        public void ShouldPerformTransformationFunctionIota(int roundIdx, string input, string expectedOutput)
        {
            var inputState = new BitString(input);
            var subject = new KeccakState(inputState, 1600);

            var expectedResult = new BitString(expectedOutput);

            var result = subject.Iota(roundIdx);

            Assert.AreEqual(expectedResult.ToHex(), result.ToBitString().ToHex());
        }
        #endregion Transformation Functions
    }
}
