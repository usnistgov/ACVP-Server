using System.Numerics;
using NIST.CVP.Crypto.Common.Asymmetric.DSA.Ed;
using NIST.CVP.Crypto.Common.Asymmetric.DSA.Ed.Enums;
using NIST.CVP.Math;
using NIST.CVP.Math.Helpers;
using NIST.CVP.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;


namespace NIST.CVP.Crypto.DSA.Ed.Tests
{
    [TestFixture, LongCryptoTest]
    public class EdwardsCurveTests
    {
        /*[Test]
        #region Ed25519Addition
        [TestCase(Curve.Ed25519,
            "E763B3BB81055AA92CB870C0E16C5719E0A7CC0A", "000543298F5F6371EFE0AEB29F80ED64A4DB263CAD14",
            "0001817B20F1D8746C9689A950FC579EB215B6778B8D", "00041D74E2A6B537F4E12B9BBAB788ADDACA8F18E0F3",
            "000414F9650E30A3E61C97D4527FA49F6ED0DDF52D81", "0002D552B14B5434567709F5042019B80C247C5BEFE4",
            TestName = "Add b-163 #1")]
        [TestCase(Curve.Ed25519,
            "00065B00AE838286E55AB3AFC5C47F026C1F83264443", "0001EAF74428ECAF8AFBEF2D10C38B64E5F5EDB0697F",
            "4F0EBEAE4FB2B3F1FF32338BC06725B0990BFBD7", "0005A5FF0518EE6F966D8DE4DE78B9E605621B33C12E",
            "0003F1A70CBAAEE59F8EB7DF2BAEDDF8867C846FB72E", "0004F0382A0E170F52F2FABAFB01774E5514BF2450FE",
            TestName = "Add b-163 #2")]
        [TestCase(Curve.Ed25519,
            "00067C7AA501E0082BB6C7A7086A711193822823FC9A", "0007CADC065E9134274F3B706D681E6E6EAF7A11334A",
            "000568C550042B7E9059193D10640E365DE364D1F2FA", "000351300258DFF7122BD751AAFBAC27EEB8FA942C23",
            "0003B75CFCA8C138915EA8186B5496DFE7ABBCB3889A", "00058DDA4283812876E093238DF3150BE87834DF87B9",
            TestName = "Add b-163 #3")]
        [TestCase(Curve.Ed25519,
            "0006525BAF8320EE97703C119C0D7E65514460384D31", "00075F24C3C564BB177E3EA72D1AB28E8A874C8C3A5D",
            "0002DF657B324EA33792224123ACCE684A6744437EEB", "0005775A2863FCE2F1B48D66E5870996001E304D08DF",
            "00037D6DBFFDFB07EFCF265916F9887210E0EB050E5C", "0006BD31115DC6AE7E188FDFA96754D858454A495936",
            TestName = "Add b-163 #4")]
        [TestCase(Curve.Ed25519,
            "000743AC3A81D5668743B5EE9775CB719E9FB71BC155", "0005484DD172482309B1553C801E8239EF95D03A6B5D",
            "0006412165803F3233CBD7E7F921E8D33E061CC751C3", "B8ED69F79317C96C0C80B508B5B82C660CC395EF",
            "0006B67F2BD587FAF855A9BC5D555297032FF24A20DA", "00033F10F20B4C651C0E18CF7F3CBB177F71FD8B6CE7",
            TestName = "Add b-163 #5")]
        [TestCase(Curve.Ed25519,
            "8EE1F9C7DAA9553068C80432065D6DEE54F76647", "1009B4811575BA9845676EBADB9D5CF9107263BB",
            "00025975818DA60AD0CCE48A53E4550027642A1CD5EB", "0003ABF8D2495DBD829D8895EBF376C28DEAA1F0D5A0",
            "00057356BE9FE804BCB8AFEE67BFF94AD044A0890584", "0003F565D754186E60502A06DDB491DEC61942666241",
            TestName = "Add b-163 #6")]
        [TestCase(Curve.Ed25519,
            "00049E6500B1A3263F75FDA7A40F0DB2CF9A5AD53B51", "00028AD79622721665B42341F4E3ACE8004A50AECD87",
            "000508C6BEBFB8DF2AFEC1BA4D2AD5ABF25CBE84BB57", "00073D3EE56DF82E419AE485B6A6A29015AD4A30272F",
            "00034B7DA1A300E9A2F904B721B68D8413604147BB47", "FE5C903881CC73D2FB5BB6D0E816DFE26C57FF83",
            TestName = "Add b-163 #7")]
        [TestCase(Curve.Ed25519,
            "00074689C01C5B04C263C975C76E68B4CD66CF88284D", "0005001DF03189A459FC3774ABFCA1B7D4FF28FB9BD7",
            "0005F99175BB7EAD2522B79CF2E802CB4F7B8824E450", "00015456A0F7C6DAEC4699B61D6EB9972D77CCCE0E78",
            "0007F4EAFEE117AADA24567241233AA1C9F23018B7E8", "000616525CE907CAF2ECFA19EFFF7C3C9ADE430BC6B3",
            TestName = "Add b-163 #8")]
        [TestCase(Curve.Ed25519,
            "00044684E8422667FABB792A9C4CCB4AE48B2D7FFD8B", "00013668DC53A29404051B5D85ACD793AC255F896B07",
            "00077B9C5A22B593F506BF443DD16A9A6BB8B94FB9FC", "000637F1F353CE9C851D27539E6C60FF90B9E985EEEF",
            "00020683DD9F7A4A36EE5A49E4C1218BC7043EBA97AB", "00056455D1C757FAE3D5F599B8D2BF51DB488C41F25C",
            TestName = "Add b-163 #9")]
        [TestCase(Curve.Ed25519,
            "00075C15A8424DCCB2DB37F96F91815C50B5971104D9", "0002A5EB17C034B1FB4E6B8934C8AC87B25F7D46529C",
            "168E1BFC559499CEADB515A6542AEB9A9DAC3C99", "000127C9B0D164F2C83330137E7F06F624997CBF044E",
            "00019D276728BC87432D1E046B9E40A65CA59FCDCFB9", "000538100AE49D44B2E78A67BF3873283C647FFA35A0",
            TestName = "Add b-163 #10")]
        #endregion Ed25519Addition
        #region Ed448Addition
        [TestCase(Curve.Ed448,
            "00CBF2C1BEFBA65CB653B6CE3BDCA3B28690C4C5012FA739D7912E24A4AC", "013949404823ED47A35380EF449FCAD2802B56BFC364950591BB65A5AF7D",
            "010EA6FD2AD10EC7E51548DFFB482DDF552150A0BF373B80E97658403F57", "00D02057D3988D2991D7581E288D949B5F1C3C42D3B76D0F0079598420F1",
            "0034C8BE808A70C2706FE5FAB2EC8191C4609D504EA79D87FCA5B2049C40", "000FA2727F3056FED92B5B5AF6DE685C8775DFDBF5C8444EF188AD019D69",
            TestName = "Add b-233 #1")]
        [TestCase(Curve.Ed448,
            "00060DA872EF0576E2A825E95CB123A0181ECB53CCD845F50657BD1B7665", "006C4B10C0A353AFBD2C9C06988DA98E9D80F59B427ECC47718422F65AE0",
            "00D31343A0CAA0F4C94E128B10AA58A94A972F5E1EE66B5E07326656D1E1", "0168BC09947AFA962B9F87705D6D13DF059C57F5E67BEE5F2E414BA0C734",
            "017C635C6C257863F79AEE4BAE7089D188671C783C53F0164CF338833E8C", "00E22020AEF34464A994298FC9EA2F8978C8E955484165508E5AEAB2F44C",
            TestName = "Add b-233 #2")]
        [TestCase(Curve.Ed448,
            "012F0F07BED600416B5A9393526797C253955F6E654CA6DD7ABB58176B1A", "0009E485ACE2D579642B8AA83628F27A24EE833F285B8E1C2F14459D67FE",
            "014AC4044FB06483187F67AF325257A31B9F8AFE2AD417B3D8FAEAAEB7FD", "00AD99ED42CB4D6A66E02F736C465F35C1E0379248FABA5F98A56604EBFF",
            "012F9D9DD4A86A1560A89F42AAF42F93832F370CD751A30F4B14FAAE8052", "0183DFADC8DB6D859D07E3F2EC65B883CF66943B3BCEA947CB39A2D2110B",
            TestName = "Add b-233 #3")]
        [TestCase(Curve.Ed448,
            "01D2EBC7B56F4A04B92DFADF694261E1B969D31B139F0C0493D50B04322E", "01D1D6602AF398096B06C0D0314D13CE88D0A26C57543A9AF174A72E5D5D",
            "01F2EECB194DE39C25EFFEBD6391D8858313B327137374E6A8E6E5EFB7E4", "004FF407FDF4C0A63DD99CAB732BE2D48536F7C4093E2A228A2422C22D16",
            "0111CBFE4769CCB984BACE4E45D01D5A386514FF2989272D8EE0F984C8B4", "01A713F7B6E78E337DE147D9B8360589C086F85701673B811070D34CB7D1",
            TestName = "Add b-233 #4")]
        [TestCase(Curve.Ed448,
            "01391FA833C88E008078CF012EE91A6CEC6E9BBE6ACBFA2B9A0508398E66", "017107C453135FBB56ADEB66A7022DDAC35C44827BB642F78E35CB3341CE",
            "00D95F4F9E84BBB0972ED3E18EFAC264E3425A8165EBB450B7F2AFD3DC36", "0058CE53EC08485F32E16B62F34BCB1E12907477AEA69CF1B31DBFDAD17C",
            "01E972B326C98CEC05ABF9A316E5C7BCDAAB6DDE1C5A525AA396FC020522", "01E1DDB075EA99DD49204D086A301DAAD07FA5382AD28A4827D85197BEDC",
            TestName = "Add b-233 #5")]
        [TestCase(Curve.Ed448,
            "00741EDFFC44281836F02C54CEA9A8A9A383BD859759D3F72F1072884493", "002817BCDB4C035FDD9293A0E45DDE0ED8CD2786194FE9F83DC9ADA2F151",
            "01EEC8DBBBF0CCD0946DBC1BBDE72F691CF39CC66B9F2263198D7987EC54", "00BBDA0368D69DE1818A60176DFE9BB1DAD2DD4028747A59FB8399B7F031",
            "00B268298571744869B0389D8F937F65C52E90E67643BB85432DAB47D68D", "0103A7BD265A095F57A1D443C1852223E043F517C8299E655A792D8E0668",
            TestName = "Add b-233 #6")]
        [TestCase(Curve.Ed448,
            "008FDFB4C68707BAB9DC5938BD0D58C529D8364097FA7A0A440AF6F15E39", "01BB8416B7412E872CDA06E1EA4CD75C3B07829FC4BDEA44F7316E917B13",
            "01FF83886563D74D8300B21ADCEDBCE2732E01C51E44D8AB657E72BF7600", "005F22C676C9ECE7A9B8EF2E27D79A7F5B0724B19E6722BC9C9F72106B57",
            "01E1F097AB165BE6951EFFA2013D9217E94F0683CE412CE3268043412506", "00C79C0AE83D2D5976F5A1A06BFD1620F5CAE16D28B978EB5ABAB8D0B1CF",
            TestName = "Add b-233 #7")]
        [TestCase(Curve.Ed448,
            "01A4591FD3F24681006B29124606D0C672EB467C93138C104BF890BEC809", "003A865ED2E0E62A090556CFAC49037BFD38CD2EE08537541563F0A2545B",
            "001496C29DF344B41F8A9F15BC737C0712299642AB22AC1828EDEA080BCE", "00CACC5AF16DB9E8ACBAAB34D727CF7FC2CC0CE5A84E33431FC52B26A7A6",
            "01EBAEC0AFC50115EF9219CF08A7977256CB9136F8F7381647C7A7DBBD1F", "00EE5AF5FDD01976F82B559FE3A27778AF6E353F04FDE8CB3FC190AE6EBA",
            TestName = "Add b-233 #8")]
        [TestCase(Curve.Ed448,
            "0190F8DEBEC6CF0E4600AB44ABC69A97053B6442F45F3A5BEE1BA74A3FB2", "00FED6BA2B6B19CA49B1276A8BD5B2ADFE917BFD678AF0BCD40BEB21206B",
            "0136F6395A00E27C61A1AEA74C0C0F528A79AA7F9A0625815F0D89448062", "01E51780E8157A76CDFC44C30DD7FDF6CF2131AB29796EF93370DEA422F0",
            "01D981D088D05B10D726BBB7D6B387E8AA9D9F4ED92393A27DB9423C626E", "002A5DEF450D540BF593549AF97119D6B267E4D0755F9D6AC9C71D7FEE15",
            TestName = "Add b-233 #9")]
        [TestCase(Curve.Ed448,
            "01080294707A91A627B4D16B151FBA8E4B243D3BCB038D34994014DAFF56", "00E88A4A138080649DD0E773F0DC8751FDDAF8DD86281A76BEE96261F5F4",
            "00F524B8049F25A083E19C5324206538F6FF933D44DE22DE01244F905012", "01091F7CEBACDD77281A0BD73168F1059F31476FC78DD9ADCE8D8E97A450",
            "00FDA882E424C02F6D196581CDC9AA49E22A675A61EB4AE92BBA13948E07", "018508562E656483E4F648F6B08AC0EBA3E5F81E6425DA74CF125703AD85",
            TestName = "Add b-233 #10")]
        #endregion Ed448Addition
        public void ShouldAddTwoPointsCorrectly(Curve curve, string axHex, string ayHex, string bxHex, string byHex, string resultXHex, string resultYHex)
        {
            var ax = LoadValue(axHex);
            var ay = LoadValue(ayHex);
            var bx = LoadValue(bxHex);
            var by = LoadValue(byHex);
            var resultx = LoadValue(resultXHex);
            var resulty = LoadValue(resultYHex);

            var a = new EdPoint(ax, ay);
            var b = new EdPoint(bx, by);
            var expectedResult = new EdPoint(resultx, resulty);

            var factory = new EdwardsCurveFactory();
            var subject = factory.GetCurve(curve);

            var result = subject.Add(a, b);

            Assert.AreEqual(expectedResult.X, result.X, "x");
            Assert.AreEqual(expectedResult.Y, result.Y, "y");
        }

        [Test]
        #region Ed25519Double
        [TestCase(Curve.Ed25519,
            "00051748E3906588482CD82243A50C361052068933F1", "000369DC735B4296C00B6C9897D874833E6A39D93E00",
            "0006214E34419EE62B1DEEF59669A1FF8C23593A165C", "00019093F1CEF469BF129FC8CD3B32399AE4E2247D48",
            TestName = "Double b-163 #1")]
        [TestCase(Curve.Ed25519,
            "000290D4BB9E696F39BDD45FE62F199574B0F9F22B7F", "0004D042C425F739383CDA2D8AFD47536A98B744772F",
            "E158A049DB1B7715C93CCCB805D7A5F8DA6B779A", "00054D8B80571D425CC88A8DDAF1F14507BB7E31BC50",
            TestName = "Double b-163 #2")]
        [TestCase(Curve.Ed25519,
            "D1BB5D26BD4CD33FAA348F72A0708A2E8740BAC5", "0005F1E4679477E3E321F86D88133CD1700168396D64",
            "0001C9384127468CC57B189A6E915DF0309EF2D6625D", "000578DDF01A7A9FD79FE207E9EBF90D12E1A54DFF05",
            TestName = "Double b-163 #3")]
        [TestCase(Curve.Ed25519,
            "000170F951009D4AB65D8AF7280D118D6BFFD4472B56", "000762E4617EEE710C1FC3E1E1A73517ACB302FEDA57",
            "000312E425B62281FF15B5D090069AAE8DE827F72C9F", "0007D79ABF29DF76A998CBCC7C216EDC4BDEA2E7E7AF",
            TestName = "Double b-163 #4")]
        [TestCase(Curve.Ed25519,
            "0001A9B742602A817F7DE0FDF262227237A3ED099FDE", "0002B7D326292C274C234D52BDA9F5D3701BDEF163AF",
            "0005CA26A658AE7D5255813293FFD5AB1E61D84AF10B", "000719D584B0209987FB86B4CE597D1EDCEAB6718DC4",
            TestName = "Double b-163 #5")]
        [TestCase(Curve.Ed25519,
            "0003E51E85EC61BC350BC3B0073C9BE76A99CA8327FA", "00070CF1AB9C225754A8F68B7AEBE14BF40AA0F412A8",
            "000252FB4E7A3B3B0EDF0E0D23188E94315F7C97522F", "0002B59FC5C0E4DF3E1BAF542BEE1C82A11715100CA0",
            TestName = "Double b-163 #6")]
        [TestCase(Curve.Ed25519,
            "000669D89E09C3E5576037C22109EFB85B75ED4C9864", "000234E4A59889697DA58CB248F2BB048643B42F2FEA",
            "000125544F7185574C7F58754AC1FF19D453F2FAB8D8", "00065F82DB950FE8730AE7194495B05C1B096956AFBA",
            TestName = "Double b-163 #7")]
        [TestCase(Curve.Ed25519,
            "98BF2236519E8D4CEE92467987DE01E1E25CAF4B", "00070840954E6355C7FFD933F2F5927AB27F94F7C9AC",
            "0001A33C07B45A9DE636DA2B7EC9A695066B50DA537C", "00060F0CDCFA9CA0C8A8FF3B9D08639A87ED31255871",
            TestName = "Double b-163 #8")]
        [TestCase(Curve.Ed25519,
            "0006AF961FC167567C6F9714AAD482BAFD2A2D0AE3D8", "0005CA399242BAF3080072E41896723F815B9586F7D4",
            "00031C23BC585810A361D795D3CAE273C2E0B83C02C1", "0006941B8063C535D2BE77322CA5CAA626CB947C4F16",
            TestName = "Double b-163 #9")]
        [TestCase(Curve.Ed25519,
            "00053BD5E0D60747D45048F86038E3D19BC356159072", "3327868607A0EF7AB47BDF926677A3B060432A6C",
            "000708CD512255D742B5BA57492C277F429D26C09315", "00040BA5ADEBCD82783D1B4B8C353E577AC37B9833B2",
            TestName = "Double b-163 #10")]
        #endregion Ed25519Double
        #region Ed448Double
        [TestCase(Curve.Ed448,
            "01E058AB5293180E6BEC9B2A6627DA8CC4286DB1F2D153FD75A814D4AF4E", "015E174CC7B7A553FB91D594793F20E7094A7C4EF9B5E1BBF586F5D614EE",
            "012C9A20B448F6F8CAFF9836E18A4A1B83524F4B83C2A3B1ACE6B9C68B96", "01BC2D155FFF032882F57ED25DDA019CA1301A19B9998AC689E4B7EACAD3",
            TestName = "Double b-233 #1")]
        [TestCase(Curve.Ed448,
            "01AFCAA33A257817D3D431E59E0A4DBB26F90E824325C50DFB0587E88D7D", "003A2A4F900FA45F64E266EE4F01E3439DF687B6E5A793D7687B9D9C7F96",
            "01FD8B367D217689DBF8016DC9FFF679ACD8F4450CA2A0689FEFB59110AD", "00843BBB8DA8B7B0BEBE6CE6BE387895A40E45898B181384CC4DE0B69F79",
            TestName = "Double b-233 #2")]
        [TestCase(Curve.Ed448,
            "00893D00983859ED861F6245A86FB136019D1D7E6C88968BAA337E80BC21", "01DA29940703AB458F27909A140E1D8377E7C4C3FF7A6079D85F4D60A27F",
            "0024E82CF7E2A2B39D71991EDBCEDDB3EA3E36A0A496786759824A993DEC", "01EC90C1F9240981F939362B00B9B1340DDD102B07A2E367FAC88C34067C",
            TestName = "Double b-233 #3")]
        [TestCase(Curve.Ed448,
            "00E1AE3D8B8947B2B6B700C5A43D54E72A4C9382AC3EC83BC8207CF713A9", "01ED77290DB646B79341750A209CE86EBB1479F7AF9BF39EA07C68AD17F2",
            "01C0A5DA8AA6105C97824B9CA0A7FB9174D95D01212C3F1536E071C28B71", "01A8F563AC3DE4D812A467F4F97796E6D80F2840EC9F6D1FB8E3B62EEE98",
            TestName = "Double b-233 #4")]
        [TestCase(Curve.Ed448,
            "01BF802481872B60B25B38A0A063FBC25C3CC0A148C1350B8C4F51F93545", "007BD3853A4222C4CD58E817C9E4D1EEA351A41F6B00DC95F0678013DC2E",
            "00D6FDEBA0A79501C5DFE83FE24622107E43D4A6539FE2360F3F0D9AA5E0", "01CB7E15968BB7544CCFAD9DFA7B1B10BCB5BA3CC051D46F1B8C876EFF0E",
            TestName = "Double b-233 #5")]
        [TestCase(Curve.Ed448,
            "00C2ED4F1F239277986D1F7087DD1A1A2A12C63CE1CBDF342DB370BB64CB", "0079A65DE99694D40D55BE1AF3AC49F8EEB178D0819B1109CC95C1E23B64",
            "0067F2E4945002BC124A9323D2A3922D72D09F0D4DA8EB2C8D9297C607F6", "001EF76E7BFF9C8300C362830E7A49448948958FE754ADE2D2B499F0BC8E",
            TestName = "Double b-233 #6")]
        [TestCase(Curve.Ed448,
            "014FFF71A5C1D9463D4A0BC13294A4266819A0B6BF3EB59D5E19CFD75C17", "017E018FB64D4DF909523FA2E877DF8362A98413461FA4D7B8D02E3360BA",
            "01F95DA25EA86B3BECEBB7D2FACCFE67ECD1A2607C49168CC21D82026712", "0063D6A004AC5170009F97930EE4F2579406A68ED528A3B81E3C6384D510",
            TestName = "Double b-233 #7")]
        [TestCase(Curve.Ed448,
            "01355758E5A9B99D253F2853C3F7049B83B3E5CC7EA69BB26EAD8FE072E3", "007BEDB50BD934F4D967C1EE96ECE6760F68CBA70D29C03BD6C840D0E960",
            "0072005C6C6E6293C418F8988CCFEE677E6DF4E4F66071679488DADC35BA", "018786B3907D884B61B42C89E3A743FB1765DC8C2E338F9AFE6C3EBBC6FA",
            TestName = "Double b-233 #8")]
        [TestCase(Curve.Ed448,
            "01BF3275B6D97027C903DC8F23ADBE4391FA127A706F6E4EE7351A445B02", "00CD2A9E5ED7A03D6666A0379ECB1453B71ACF0A8265FBBFB0924996F394",
            "019CA314DE898FE7D73158002ABC90C01B018B3BF8354075F3F201E71ACF", "01325649C3D1D63202B06B16EDB0CD5210C4506E64917CA7BA0C110B0A5A",
            TestName = "Double b-233 #9")]
        [TestCase(Curve.Ed448,
            "008CC5E1BBAE351F9F5E9753C510AAA1C4D4CE49FDE78BBB3E46E9B95870", "0093CFDC4B51F114C9063FFC74703EFCF71D881C9421B5F9EC8AC44B94C2",
            "006D97975A890F3B602A7D7E24692838C073A281EE2B831FC16C6D98A343", "01FF9DEF23CF62AF0D2D387B8CA35BE10E0C05EDDB6DA4A78F9CCD02E840",
            TestName = "Double b-233 #10")]
        #endregion Ed448Double
        public void ShouldDoublePointsCorrectly(Curve curve, string xHex, string yHex, string resultXHex, string resultYHex)
        {
            var x = LoadValue(xHex);
            var y = LoadValue(yHex);
            var resultx = LoadValue(resultXHex);
            var resulty = LoadValue(resultYHex);

            var a = new EdPoint(x, y);
            var expectedResult = new EdPoint(resultx, resulty);

            var factory = new EdwardsCurveFactory();
            var subject = factory.GetCurve(curve);

            var result = subject.Double(a);

            Assert.AreEqual(expectedResult.X, result.X, "x");
            Assert.AreEqual(expectedResult.Y, result.Y, "y");
        }

        [Test]
        #region Ed25519Multiply
        [TestCase(Curve.Ed25519,
            "1061D6EDD5A46213A5FEDCE099BB079810567D29", "0005719731550DD8CB5DCA965DAF7EF0B0178FA3F9E6",
            "0001088CF577EC6543B22EC10B165F37F816F8310869",
            "000681442AB6103A13841C80656ECF13613CEFC98D17", "0002E1662018B55CAE8393B92AB7144C18C72E9C5ADF",
            TestName = "Multiply b-163 #1")]
        [TestCase(Curve.Ed25519,
            "0001C19AC629021CA25F6F08BF87D470CB4638E17B9F", "000332367D6B4822B06D88841BC705FD63F70CABF038",
            "0007D7AE39BCB04CE9807C7C2D16DED56876F59DF189",
            "1FB29218ED1E9822FC311419FD98D9E82305A88B", "0006E8E086FD2CE4756C8A8BDD29265DF36298F1D316",
            TestName = "Multiply b-163 #2")]
        [TestCase(Curve.Ed25519,
            "AF7E49B2753452452D3239D645B6ABC0F754B8FC", "000202E48D66142A6828E21F6D56592D2E79A0121B6B",
            "00079F4CDC6B312E86CB3671C5B3A941DCF7B10CE065",
            "00060C54C5F6E6C1C6130C8BB44EC5F5C4311B07E9CF", "0004AFB45E8AC763A7E8CB9A749521D810E9628A2F3C",
            TestName = "Multiply b-163 #3")]
        [TestCase(Curve.Ed25519,
            "0005BE25901CE17B76DC0E4927FFE99D5D4882B930BE", "0002E084C417FBF95FE370EC239AFA172D6DA9CC152C",
            "000353902B2933CC02B7D163F49BA7FC3D7247082B27",
            "00010B1275820BCC29D7B8E69CBBDD9514BE2E83C411", "000768FDC26BA409E6DD1BCA55100BDB9E0BE8F58A4E",
            TestName = "Multiply b-163 #4")]
        [TestCase(Curve.Ed25519,
            "000196B6E5F50A47F93A998F5BF35757A253F5660809", "0005EB19763657582360ADFE7FE01DB8527B9744F020",
            "0001929227CCB4C65A2E4F300F39B4B38B717AB725B7",
            "F2D4EDA6FBFE1F540703D483F4CA1F22F728B9A2", "0002E1F0747FE5309A01CEDEAA87964421F2C9852614",
            TestName = "Multiply b-163 #5")]
        [TestCase(Curve.Ed25519,
            "0001A479857432B973252171304EDD6977DEC6C91436", "00020A51783350981E8992225E4AD9E9F84AD9D815A1",
            "BAF98CD9F61C756B94F01B17434AFD31B4022956",
            "000310C329B61623B65968D4EF3DE5F51C6FEECB8E77", "00026CD5BBF27C3884A1864E468574CFBB2FA3AA1AE8",
            TestName = "Multiply b-163 #6")]
        [TestCase(Curve.Ed25519,
            "C6A8B0E4785E1015286C36EBB6707F10D669CD85", "00048720D17EDA01B5D3FCC97D644BDEDFFFC9E9D471",
            "000412DFB0A8289745D6EA0EE142DD7E9D248E7BC427",
            "0001A51F14599151D585AA1612B726BC43BF18F77018", "25125E37CE190D039AE73C27298CD2D7744641EF",
            TestName = "Multiply b-163 #7")]
        [TestCase(Curve.Ed25519,
            "00046DE7EACCC3050B913EE8C37356D06A8F8696E668", "000750636280FFA3C4ADD7D89529E54E429E58A279EF",
            "0002523758D182664889475CE43260428A2F4BB04483",
            "0004E0AD53A5B7D390EEA46BC97E5E355F61FC012722", "0006037F91EA06AEEE40D7E0182D1A643D0881F6F1EE",
            TestName = "Multiply b-163 #8")]
        [TestCase(Curve.Ed25519,
            "00021D526346D54337FE6F1005D0D3979524F0110161", "0004A78B184CCAB31C1668B835143C977323734F807D",
            "00059FE5DCCB89498DCB14C549B54069B6E40F2ADD71",
            "000169372E4C423500E0E050F5BDC2B455FD046799EC", "00021C75EFF1679A81744D279FBDF0F438800DF7F029",
            TestName = "Multiply b-163 #9")]
        [TestCase(Curve.Ed25519,
            "00079807875DA4B606344904942ADC3F70D5873FB989", "000745E167510B3304DB0F6BEF6C3B4616DBFBF7B83D",
            "000716B202ED4EF9678013180C934F7AD9FC0FC7D6B5",
            "0006CB6D53282DDFDC139921A1A54DE0790533BB0D23", "00023E394A5D440D4FB81A766E77ED1CEE7F9EFEC5E5",
            TestName = "Multiply b-163 #10")]
        #endregion Ed25519Multiply
        #region Ed448Multiply
        [TestCase(Curve.Ed448,
            "001CA28307A0150E870FF53032D4DDBE7F65290A1CB7BE454F3613ADFA38", "00AF48452DBDAF8EEC9D11E95D03B46CC2CC66A3CEED8D1EC728075F2837",
            "010A23EA4B0BC0F9DE451D645454A5DB80BAD4444749D7F04067576F46E7",
            "00E175EF414A4FC8614322DAD9657C5CC1C94FB040A71F0C92735539347B", "004E3F68C60B69FE3E60C36D29C77C2D7A9B5BAF3BB6EC3A2A1772C3C689",
            TestName = "Multiply b-233 #1")]
        [TestCase(Curve.Ed448,
            "01F24D67182AAA0DCF7AAA62DF4343FC927CF3CFC41264ACB6DED000155A", "01007077BA5032F0BBD925BA8AF538FDD166153735953540F1A9C4D79850",
            "0042C71975A5346A2FDBF8F949287BAC3D6FF9E5A2D7715A241D62B4DEA8",
            "0007E59C36A2F51DAE22A8B8B41E3D2CAD413A9E9A7840022BAF14433C8E", "008FB066114002A13805689D82809A9FB3BD1B3943A280BA7C54D2FDC6CB",
            TestName = "Multiply b-233 #2")]
        [TestCase(Curve.Ed448,
            "019C1F5693AD2F17BAAC37F43A038C4FCF8285061D9A7223C02E477CDA1F", "011FDCD02E65373935654236F463DB55EF401BB2E20BB65205217F9B4E1C",
            "017D780CB0068B1358764B8DDC4E9BC2FE9C57795EF3CD5B7AF387DE60E7",
            "006656F2759EF8D8833D6CF7D6DE2112F8776AE9AC6CDA8817642019626D", "001EA87E91CCFC5110F0835B74DC0CBC3D360DB5779A24F636808FA72409",
            TestName = "Multiply b-233 #3")]
        [TestCase(Curve.Ed448,
            "010F4CDA3F38B693A881BF244673BC4F9E2D45A37B506652D6C33BF2FFC6", "00356E43FD5BD429C8EE138CA3D818E31EF0B61D497317E6AE3EF0403F6D",
            "01DE345FF241B3869CBD694FCF92F8D7B3341ECD45D9CCA890B371BA8EBD",
            "01F4CBEF4B956E2DA44CA5A46EB68CC7980FEC9279933974C25A6B22ABF6", "00C55A69AEE182D4F522E48CF44661D914260AC663B0FAB36D4A174111C5",
            TestName = "Multiply b-233 #4")]
        [TestCase(Curve.Ed448,
            "00B132F3D8DB14A77FBA09217A1B8B29A8916DDF3FBFE06A369B113B2367", "0132A0100A7DC0E16E185051A54676662789F13D56A886F683CBDABFCD4A",
            "01B492E0F606490238FAA5FA389961BD9D9B89461F6157D115B064605FAE",
            "014B4B8588CED3BFCF92E993FBA439DD03A1D94F8B691871022B8BA2D6FA", "001676D77F1D4BB0E5CD2A0A2DB0EEAE849EC3D0FA115176F565B76530F3",
            TestName = "Multiply b-233 #5")]
        [TestCase(Curve.Ed448,
            "0128544D78BC783749359C70564AD5283F26F6EB1E40DA188DBCF406830A", "00C59A54CF1582F73872CC2C1365104D56D5E23C2DBCEA61680E8713F099",
            "01F8656F9E3780C8C94058670EA3040A9C1C377AE8D8918B7C5F048DDA4D",
            "00E10F6CB1B598D89CF7C83E1FA8CE22D42434849B52203D7637404109D6", "0049DBDACCE49C9EFE0863FFC756B7BBD50BDEBF03C15859B419D91AB54B",
            TestName = "Multiply b-233 #6")]
        [TestCase(Curve.Ed448,
            "01FCC782BD9FC370A6554EE2C361017A2F97F88EF82CF0C05E83168AE57D", "000432448105CB0CA96D9FD8F7BE860134756C2F5A547D2AAB06BBFCD83D",
            "003D83B0802018E7B5C3C47B9634945C99C6086F4996797F497AE8902CBA",
            "015AF1A1D7054AAAD9A5BFF5EC1DEC132653A15DDE804EAD700D77118B94", "00F3D1F18350BD968FFCD790ECA4485FC2C0FCD6FE0EFB393407A7288748",
            TestName = "Multiply b-233 #7")]
        [TestCase(Curve.Ed448,
            "00A4411010F5AC0ED385B717599D295FCCCB67ECDE26B49DA9B8E79A1FFA", "01D97D4B0E8AB7B3BEC7F7E3AFA0A0F2AFA505263A772337579A060F1812",
            "00302C3DF83B554CEFBBF09B2F7BA1C64509E6F22E9A81BD20045C7B8022",
            "01B7A0DE0355640932B0BDBD2D06F7387DD2FE5A62B06B6DCE89B13594F2", "004D19DA1D670E71F1B6F8161A6A1D67AF2D58B7F03F5EB80D15CAE1F0F8",
            TestName = "Multiply b-233 #8")]
        [TestCase(Curve.Ed448,
            "00E8CB9289904EDB00674518B5AD5C3C065ED822006960EF85132E31BFCF", "005ABF90735FC6A301574A9C3578D01A13EF9E85DBAADC9614F78B3CAC07",
            "006C43399E240D56D56852801549A78D55CFF83215083E9CF37E8C806EF7",
            "00D3705FD430339BBBE895DBF8BF4B5867D5D3B0D5534862CF3033363B1A", "01643B622C54B48831DAA135218D0B722AE546725F8A0E2F1709C7CE03E9",
            TestName = "Multiply b-233 #9")]
        [TestCase(Curve.Ed448,
            "01FF6D237E14639CC4D32659DB6A433BF081FA76F40FF5008076DEC99CA7", "00713685174BBE92408A955D0ABAD593F50A854C1B0002017C0B9BCFD581",
            "0036BDDF3243709388BC94FCD8BA0BB77F76EA7540507453C161816B0972",
            "01A7C0F2D765896C554BFE2994C4B3FEFA86F58D245DAF43AEF5D2494F90", "00020F796119C068D26F69CFDB51B886EDA7D8BCA881740FA34A706BC19F",
            TestName = "Multiply b-233 #10")]
        #endregion Ed448Multiply
        public void ShouldMultiplyBasisCorrectly(Curve curve, string axHex, string ayHex, string multipleHex, string resultXHex, string resultYHex)
        {
            var ax = LoadValue(axHex);
            var ay = LoadValue(ayHex);
            var multiple = LoadValue(multipleHex);
            var resultx = LoadValue(resultXHex);
            var resulty = LoadValue(resultYHex);

            var a = new EdPoint(ax, ay);
            var expectedResult = new EdPoint(resultx, resulty);

            var factory = new EdwardsCurveFactory();
            var subject = factory.GetCurve(curve);

            var result = subject.Multiply(a, multiple);

            Assert.AreEqual(expectedResult.X, result.X, "x");
            Assert.AreEqual(expectedResult.Y, result.Y, "y");
        }*/

        [Test]
        #region PointsOnCurve
        [TestCase(Curve.Ed25519, 
            "ce457677bd8627b1247c185372d413c520f6d0608de0972229349d2b9ae0d055", "d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a",
            true, TestName = "PointExistsOnCurve Ed25519 #1")]
        /*[TestCase(Curve.Ed25519,
            "00066499232C0FED45301404782344A374766533B60A", "0004B549A871C577A2EC6B53DE8FBCA532B9AD7E6C61",
            false, TestName = "PointExistsOnCurve b-163 #2")]
        [TestCase(Curve.Ed448,
            "00fac9dfcbac8313bb2139f1bb755fef65bc391f8b36f8f8eb7371fd558b", "01006a08a41903350678e58528bebf8a0beff867a7ca36716f7e01f81052",
            true, TestName = "PointExistsOnCurve b-233 #1")]
        [TestCase(Curve.Ed448,
            "01DA664638DA59453A816E842DC776C37D7222AF808971FC4993182804E3", "01BB7AADE0594383E663A91582D86DB7F5C5551678BA1A1BBE2F97F42069",
            false, TestName = "PointExistsOnCurve b-233 #2")]*/
        #endregion PointsOnCurve
        public void ShouldKnowIfAPointIsOnTheCurve(Curve curve, string xHex, string yHex, bool expectedResult)
        {
            var x = LoadValue(xHex);
            var y = LoadValue(yHex);

            var a = new EdPoint(x, y);
            var factory = new EdwardsCurveFactory();
            var subject = factory.GetCurve(curve);

            var result = subject.PointExistsOnCurve(a);

            Assert.AreEqual(expectedResult, result);
        }

        [Test]
        [TestCase(0, 1, 4, 4, 4, 4)]
        [TestCase(4, 4, 4, 3, 0, 6)]
        [TestCase(5, 0, 2, 0, 0, 1)]
        [TestCase(6, 2, 1, 5, 3, 4)]
        public void ShouldAddTwoPointsCorrectly(int ax, int ay, int bx, int by, int expectedX, int expectedY)
        {
            var mattsCurve = new EdwardsCurve(Curve.Ed25519, 7, 2, 3, new EdPoint(0, 6), 12, 256, 247, 2);
            var result = mattsCurve.Add(new EdPoint(ax, ay), new EdPoint(bx, by));
            Assert.AreEqual(expectedX, (int)result.X, "x");
            Assert.AreEqual(expectedY, (int)result.Y, "y");
        }

        [Test]
        #region PointsOnCurve
        [TestCase(0, 0, false)]
        [TestCase(0, 1, true)]
        [TestCase(0, 2, false)]
        [TestCase(0, 3, false)]
        [TestCase(0, 4, false)]
        [TestCase(0, 5, false)]
        [TestCase(0, 6, true)]
        [TestCase(1, 0, false)]
        [TestCase(1, 1, false)]
        [TestCase(1, 2, true)]
        [TestCase(1, 3, false)]
        [TestCase(1, 4, false)]
        [TestCase(1, 5, true)]
        [TestCase(1, 6, false)]
        [TestCase(2, 0, true)]
        [TestCase(2, 1, false)]
        [TestCase(2, 2, false)]
        [TestCase(2, 3, false)]
        [TestCase(2, 4, false)]
        [TestCase(2, 5, false)]
        [TestCase(2, 6, false)]
        [TestCase(3, 0, false)]
        [TestCase(3, 1, false)]
        [TestCase(3, 2, false)]
        [TestCase(3, 3, true)]
        [TestCase(3, 4, true)]
        [TestCase(3, 5, false)]
        [TestCase(3, 6, false)]
        [TestCase(4, 0, false)]
        [TestCase(4, 1, false)]
        [TestCase(4, 2, false)]
        [TestCase(4, 3, true)]
        [TestCase(4, 4, true)]
        [TestCase(4, 5, false)]
        [TestCase(4, 6, false)]
        [TestCase(5, 0, true)]
        [TestCase(5, 1, false)]
        [TestCase(5, 2, false)]
        [TestCase(5, 3, false)]
        [TestCase(5, 4, false)]
        [TestCase(5, 5, false)]
        [TestCase(5, 6, false)]
        [TestCase(6, 0, false)]
        [TestCase(6, 1, false)]
        [TestCase(6, 2, true)]
        [TestCase(6, 3, false)]
        [TestCase(6, 4, false)]
        [TestCase(6, 5, true)]
        [TestCase(6, 6, false)]
        #endregion PointsOnCurve
        public void ShouldKnowIfAPointIsOnMattsCurve(int x, int y, bool expectedResult)
        {
            var mattsCurve = new EdwardsCurve(Curve.Ed25519, 7, 2, 3, new EdPoint(0, 6), 12, 256, 247, 2);
            var result = mattsCurve.PointExistsOnCurve(new EdPoint(x, y));
            Assert.AreEqual(expectedResult, result);
        }

        [Test]
        [TestCase(Curve.Ed25519, "d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a")]
        [TestCase(Curve.Ed25519, "3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c")]
        [TestCase(Curve.Ed25519, "fc51cd8e6218a1a38da47ed00230f0580816ed13ba3303ac5deb911548908025")]
        [TestCase(Curve.Ed25519, "278117fc144c72340f67d0f2316e8386ceffbf2b2428c9c51fef7c597f1d426e")]
        [TestCase(Curve.Ed25519, "ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf")]
        [TestCase(Curve.Ed448, "5fd7449b59b461fd2ce787ec616ad46a1da1342485a70e1f8a0ea75d80e96778edf124769b46c7061bd6783df1e50f6cd1fa1abeafe8256180")]
        [TestCase(Curve.Ed448, "43ba28f430cdff456ae531545f7ecd0ac834a55d9358c0372bfa0c6c6798c0866aea01eb00742802b8438ea4cb82169c235160627b4c3a9480")]
        [TestCase(Curve.Ed448, "dcea9e78f35a1bf3499a831b10b86c90aac01cd84b67a0109b55a36e9328b1e365fce161d71ce7131a543ea4cb5f7e9f1d8b00696447001400")]
        [TestCase(Curve.Ed448, "3ba16da0c6f2cc1f30187740756f5e798d6bc5fc015d7c63cc9510ee3fd44adc24d8e968b6e46e6f94d19b945361726bd75e149ef09817f580")]
        [TestCase(Curve.Ed448, "b3da079b0aa493a5772029f0467baebee5a8112d9d3a22532361da294f7bb3815c5dc59e176b4d9f381ca0938e13c6c07b174be65dfa578e80")]
        public void ShouldEncodeAndDecodeProperly(Curve curve, string encoded)
        {
            System.Console.WriteLine(LoadValue("ce457677bd8627b1247c185372d413c520f6d0608de0972229349d2b9ae0d055"));
            System.Console.WriteLine(LoadValue("d75a980182b10ab7d54bfed3c964073a0ee172f3daa62325af021a68f707511a"));
            var encodedOriginal = LoadValue(encoded);
            
            var factory = new EdwardsCurveFactory();
            var subject = factory.GetCurve(curve);

            var decoded = subject.Decode(encodedOriginal);

            Assert.IsTrue(subject.PointExistsOnCurve(decoded));

            var reEncoded = subject.Encode(decoded);

            Assert.AreEqual(encodedOriginal, reEncoded);
        }

        [Test]
        [TestCase("03")]
        public void ShouldEncodeAndDecodeProperlyMattsCurve(string encoded)
        {
            var encodedOriginal = LoadValue(encoded);
            var mattsCurve = new EdwardsCurve(Curve.Ed25519, 7, 2, 3, new EdPoint(0, 6), 12, 8, 247, 2);

            var decoded = mattsCurve.Decode(encodedOriginal);

            Assert.IsTrue(mattsCurve.PointExistsOnCurve(decoded));

            Assert.AreEqual(4, (int)decoded.X);
            Assert.AreEqual(3, (int)decoded.Y);

            var reEncoded = mattsCurve.Encode(decoded);

            Assert.AreEqual(encodedOriginal, reEncoded);
        }

        [Test]
        [TestCase("2880", 3, 40)]
        [TestCase("3F80", 3, 63)]
        [TestCase("2800", 100, 40)]
        [TestCase("3F00", 100, 63)]
        public void ShouldEncodeAndDecodeProperlyMattsCurve2(string encoded, int expectedX, int expectedY)
        {
            var encodedOriginal = LoadValue(encoded);
            var mattsCurve = new EdwardsCurve(Curve.Ed25519, 103, 1, 2, new EdPoint(0, 6), 12, 16, 247, 2);

            var decoded = mattsCurve.Decode(encodedOriginal);

            Assert.IsTrue(mattsCurve.PointExistsOnCurve(decoded));

            Assert.AreEqual(expectedX, (int)decoded.X);
            Assert.AreEqual(expectedY, (int)decoded.Y);

            var reEncoded = mattsCurve.Encode(decoded);

            Assert.AreEqual(encodedOriginal, reEncoded);
        }

        [Test]
        [TestCase("04", 4, 4)]
        [TestCase("09", 4, 9)]
        [TestCase("84", 9, 4)]
        [TestCase("89", 9, 9)]
        public void ShouldEncodeAndDecodeProperlyMattsCurve3(string encoded, int expectedX, int expectedY)
        {
            var encodedOriginal = LoadValue(encoded);
            var mattsCurve = new EdwardsCurve(Curve.Ed25519, 13, 1, 2, new EdPoint(0, 6), 12, 8, 247, 2);

            var decoded = mattsCurve.Decode(encodedOriginal);

            Assert.IsTrue(mattsCurve.PointExistsOnCurve(decoded));

            Assert.AreEqual(expectedX, (int)decoded.X);
            Assert.AreEqual(expectedY, (int)decoded.Y);

            var reEncoded = mattsCurve.Encode(decoded);

            Assert.AreEqual(encodedOriginal, reEncoded);
        }

        private BigInteger LoadValue(string value)
        {
            var bits = new BitString(value);
            bits = new BitString(MsbLsbConversionHelpers.ReverseByteOrder(bits.ToBytes()));
            return bits.ToPositiveBigInteger();
        }
    }
}
