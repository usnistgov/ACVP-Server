using NIST.CVP.Crypto.Common.Hash.CSHAKE;
using NIST.CVP.Crypto.CSHAKE;
using NIST.CVP.Math;
using NIST.CVP.Math.Domain;
using NIST.CVP.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.Generation.CSHAKE.IntegrationTests
{
    [TestFixture, LongRunningIntegrationTest]
    public class MCTTests
    {
        [Test]
        [TestCase(128, "167A08F174A128FF7C27363B0DB91E91", "3AB16F6B8ADFB0EBCC36B355BD200E2E9DFEAB757563B83FD230D5523BBC70FB05DBDF12504D1F43B7D4DAF06CAD11F0E756F8F5085A6B7B458F46552EEB6A4896FEB98DEC21E0A9FDFED7B79338F0035F4076D3BA029F377A8703C206C47DFAD0C7E9D03295ED75755AFB5B9FFDA964D5319DAAB265247F3111083E5FD96BDBD961C8A5D239417117E7B5D8BA6F91FA2AA12A119EABE1ED82E350B92E36FE7E6BF7330EDE6552935996C67820FFFB0140ECC5700B7213D74468E0754504ABF50E4DB2C11E884A250DCFB38BF3BBAA5596A58A3C538A49D80E12473D0DFCDAF5ECED5DABC35FEB195E29902A3F4CDCD0C24E6481E314F2D420F629E956EE4CC51CF9FF8A235ECAD1B2DA48F9F337A873207BE4C78F34106B6640D177C72485829AC8924A86987AFB49812A33EA221A7247D18620BE87C548C624E88FC298E8D9CE2C27076912EFFEA7D24DADBA2640377A6B6D5B0BE1895B49814FAE29067495DF293CEC1D444A4454ACE0195AF143BE650B6EF71687EEC384002C029814F244DE2E4ABF13C7B3B62D3CA2FC398953200FBFE224CBBADCF113C6031B6B31EFBE9A99", TestName = "CSHAKE 128 MCT")]
        [TestCase(256, "D12C3D4DD2B3CECFDDE843A21364EEFA69BF9CFC3C7081444C8748C7175FB817", "1C8F33D79F35BF632164D700608F04F74C76C95A4CFB55F5E22EB866A2B09161B6518E52335B7B02C27F21E37019E651ED7C9C1B43D2D6810A0B93D83F5F54ADD1A5F044F9584CB981D670606AA94624F50C08834D8AD41E30148E2C05A0249BB80987A2A7FEB4ECBFF08C34116A8F054488D383963E01F6C5C7ACE1C34CB3F701033E722E8413635B1310DE5AE044DD1CEADAA74BE1E099D4955B5DDDA08A1BCF5B34CF65F9183924CEF2A8FD25C3EC6F906D4269D2ADDAE5AA5A5B824C27727B80A03B9484BCB2CBE2A8EEBB32E83C7FC7CB31ADD5EA4A9C608968B599A0CC53A0A42BA33D27AE67429DF8C1F9D98B7045290D5F870522A3A958CCA91B9EFF874EB6535E4B2126C84B2DEFA05EAAF79FCEE38899D8516A", TestName = "CSHAKE 256 MCT")]
        public void ShouldMonteCarloTestCSHAKEForSampleSuppliedCase(int digestSize, string message, string digest)
        {
            var subject = new CSHAKE_MCT(new Crypto.CSHAKE.CSHAKE());
            var messageBitString = new BitString(message);
            var digestBitString = new BitString(digest);
            var hashFunction = new HashFunction(digestSize, digestSize * 2);

            var domain = new MathDomain();
            domain.AddSegment(new RangeDomainSegment(null, 256, 4096));    // This is how they were generated
            var result = subject.MCTHash(hashFunction, messageBitString, domain, false, true);

            Assert.IsNotNull(result, "null check");
            Assert.IsTrue(result.Success, result.ErrorMessage);

            var resultDigest = result.Response[result.Response.Count - 1].Digest;
            Assert.AreEqual(digestBitString.BitLength, resultDigest.BitLength);
            Assert.AreEqual(digestBitString.ToHex(), resultDigest.ToHex());
        }
    }
}
