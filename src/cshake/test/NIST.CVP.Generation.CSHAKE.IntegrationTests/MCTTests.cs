using NIST.CVP.Crypto.Common.Hash.CSHAKE;
using NIST.CVP.Crypto.CSHAKE;
using NIST.CVP.Math;
using NIST.CVP.Math.Domain;
using NIST.CVP.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.Generation.CSHAKE.IntegrationTests
{
    [TestFixture, LongRunningIntegrationTest]
    public class MCTTests
    {
        [Test]
        [TestCase(128, "A32CC00B6229FB67BCE8306D2BED6089", "E51CFFCEF8B78CC1F227D87B13696CEFDC963BBAEA3139D97B78F2C390259D6C4660DD141D2A162556BFFEE720EE72C0E58E48514D246015555B0FF8C065470EE45AE53DC914A215F92C0820C05A037D0A3F9BC12D3F95E29BC01F1A50965414175CDF17FAF9462320529C54A6F680BA6C6C8CEC9C5951487C3544F93ACF97871F2572A27835A1D9CD052D9DF2D44DD1C12610C9BFCC3B5A4E237ACE3DC4C9D50EF5ADFB0085A943B5A9E927D046019CA59F8A564FCD728142187928DEEBF6954624B84CF94683D203955F3F906053A4DB30A1DE1754AEC854D4D1C7156ECF6AFE59241C17E7EF18EFB7A06D3CBE9F8BB14A73333B22634632920A617F236E207E773FD0BA37A1E03B5B50678600A5A80769C82107AAA793CD9C62DCFB15C16FCB403D00451B62C3634F7F061E01AFD636FA7240C74096152A9D285CADAEA04AADB4543F3EF2558F5B0240D4BF4D7B435ED4FBFE254491421885C1381A73FB63B8AEEA4A6CA02313F4B7A5BA05B18CF28475A237DA21", TestName = "CSHAKE 128 MCT")]
        [TestCase(256, "DE50427C2F080E46494402089412F28953CE79A33B374D22F544A27745F4191B", "DFD199F90CC240BB163A84B0031960399C2361CB3D940C0B1EB1309C35C3365F3132B27517687860778A0EB5EBC4B0FD77B143C7C6DBE9FC1ACC2A0C7978B35C4F169DB118EEBB5903D2B213E256D665C4A2A755AA7B6C081D67560BE1B8F95025EF206FFC043B1F96AEA273EF2CD99CB20278B78F44B09787BC22E1C9DB56F5CFF3C974B8ECBCFF8636B388461853ECC87263D1AB8DB4F003964CDBDE2592B5802C6906", TestName = "CSHAKE 256 MCT")]
        public void ShouldMonteCarloTestCSHAKEForSampleSuppliedCase(int digestSize, string message, string digest)
        {
            var subject = new CSHAKE_MCT(new Crypto.CSHAKE.CSHAKE());
            var messageBitString = new BitString(message);
            var digestBitString = new BitString(digest);
            var hashFunction = new HashFunction(digestSize, digestSize * 2);

            var domain = new MathDomain();
            domain.AddSegment(new RangeDomainSegment(null, 256, 4096));    // This is how they were generated
            var result = subject.MCTHash(hashFunction, messageBitString, domain, false, true);

            Assert.IsNotNull(result, "null check");
            Assert.IsTrue(result.Success, result.ErrorMessage);

            var resultDigest = result.Response[result.Response.Count - 1].Digest;
            Assert.AreEqual(digestBitString.BitLength, resultDigest.BitLength);
            Assert.AreEqual(digestBitString.ToHex(), resultDigest.ToHex());
        }
    }
}
