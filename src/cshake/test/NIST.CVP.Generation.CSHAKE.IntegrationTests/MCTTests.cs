using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using NIST.CVP.Crypto.Common.Hash.CSHAKE;
using NIST.CVP.Crypto.CSHAKE;
using NIST.CVP.Math;
using NIST.CVP.Math.Domain;
using NIST.CVP.Tests.Core.TestCategoryAttributes;
using NUnit.Framework;

namespace NIST.CVP.Generation.CSHAKE.IntegrationTests
{
    [TestFixture, LongRunningIntegrationTest]
    public class MCTTests
    {
        [Test]
        [TestCase(128, "f07addd0109137bdae25f64eeb277f7f", "ddc33d7305d818f9ed867e7c4a5fac86932cb903b5f5598711663707726524bc0813433d17252560e2089b202cb0ed856b1a2f70e2ddb8a9acda9bcaedadf219dd8c9758d1f426cd7c25f36e4d3d7f86929f9f9cef72b5c456ef5178bd7e305ec12796cc64350d4b8b8950d65d4a2fefcea269bf7f965e399f2964491a874d63e7ad1a45a2794673325cc9c60446a3d7f2bd1622212fca292f26fb44fe0924c8a0777726c139d332eede0a37d595bf17691c3424bd46859495af2503c7e3a41b8392c3cccb72bb0b955bea5aac7146ab913f246ab70508b9dba64e91c34d10bb867444f1dfffa99035191bcf9bf1870b8b7d9cf7adfd099b68dbbbdf9d83a459a81b5eeabf0f181057ead0152c6cdea49003582b0afae79ea65b882d7dceda4f52ef530ebc90995f5d654b0974b64b68867baa732a6425efb12c4cdcadc2b45756ac2cbfd00a83a2fb0489af72e051aadcce138711c25452d0f420cb8a428a83bd3fd2fc652d4a1d217f7f68a2458e635d3c029e7b397d53164c1ff676c0515f4d1c19c79c2d6391d54cc4a7ff84bebd111be6dd0e39b8e5b2eecd86721996c2293beceebb68da6e4288efb79804da1f75c7f990857939e4b57bbde2521ab3b4d9dec6d1168b2bf9708aab1f36fe1985df3c2ec2bdfef96bc91969cb0a355769a9fb60628277edf7e3d8b981e1c2ba54dcff4377eb3becb5a01b5b2bea136325cc0c45ea00abe59e7def873512480b528053aed36915b9f4437ebc27ef5f65b7d65e4ceef442af470c5423d0636ecc6565b68eebff817d89e7392152edd6e0dfb7592d1a920a914dac52ba98d6e5eb7b6f36151fd3dcf78436beda4957597790dfd77d0b006ce132e7171cf2cce13d1ac9edcf80e8f8dec12d905881047f610a09bc074c01ff2830f712ad43ad4d4aab0b4707319a3cefff4fc8ebc599c6fc326c029aebcc9ea3a25369028801125824ef078169eea2320406b87f365a4b8d9b984996057773628c9f1f5453786276b86869cb5fbd9dfc23ef4281aaae12d58972c526ee0fdddfb6ef249f86efe02b5d8e1b711bf56dcd2a6eef67d743c877d8108b1bef9592e0e1ec7d2dcb15d8de64d92f8ff63a131eb06b03e92517970815c7eb3f2ad73e72059e7e59a9f7e5b5e3b944b148013cfb082bf8bdc3769a6f3ad38b4540d8d7c1a9a0730635a9460d7761b07b46090b37d10b7ebb9c27d90aaa5e262ec4450e8b9bdfa9a9561254aef4d641a9b4923f85ba6dd3fd93da0836a20f29e14d8b137a43738ec8bfab5733b330d08b77bb439f55c564e3d574c0ab83e1f48a3773e9bc770ad2dfb44ce6b33e5e2c0938b25d7235b43a1fdd539c0f75fb64dac2a772afd1fb02ea82c7fe70fe74827f78768030817a440ee02c9fa96eafcb5f7605626d507e206e3de1e62abffafce559b31d869fa3a631fa9844adaff14f5a08fabe676c3eb5180e634bfa1b8df6e512481bd827f417082b0d5a7592747bfe73cf7d7c0e01cb97fa5e8af8253b3fc05176820428fc525b2a90d2a76e51be0707fb8a18c3c63495f71960388ed75aad1ba9e7377838a07e9a8d805831ef3f13d1329d8c0696401ae96252b52eb31122cedc2647d4e804ec9b8e6e5b20847e877dd0ff5b9df9773cd9f2d50994ebe65d42822c0674a7b455f143094a88343463a1e896c9523ba932e1f800bad5ef45d0e5c09d9c62935f7cb29bc8005ecbc2f75200d7b21867b920e66a44c6ab52222d3e7dfae27e944735b614dd0cca2f847426b4ca9664a0433d751e4296d77d159697b8b5441066c66dfc05fbe06c3ef93024e03635c5497fb86548e442752c8eff20f371acdf617821932e1f9250b785a8adf7d7fa1289b02704bfa15a6eea0fd901554a29365912472308b20ccfaa7d3d291d9ba637694b03754394ab3a69099807bada800d925d0b79adb4d178ed27e0ac4cdb908857f183de4603e534576cb8c67753e0025abca9405a7fdad6dc5bee589147370d89f0aa05f2fcd90b77b23bb4e0a820bb2d2dac74978eb67371a0facce07846b3035426055410ac3be3bb98ecf05edfeff76f0b138c9168d9df1fd3aea076b4357274c4fd335fea85a452885c91383f60df5fa74d86bf368fb607743f027be70d226d348e966d5b3721a38dc859ddbb1b5017188ceab5b39b8d710c214d0ca4ad68e281cd48850c2dbfdc3e006754aa2ec0a6b97fdfb29baa0f39c9f1f82e7a2d46ee6fb70f5295131b2fea51ae843feff757ea41c3aeeeb50f623799a7ea08fb994931349af5e51c768ecac9de8bb37b133b56e75889df1409d76436bd759c6144a24edfcbcf18a99275c9ff6e78ba5ba03fdad79dcf8e4486b72fc5e9272b491b3ba9e718385a7e666c6d84c8aae8a8cf1367481ea161eb4bbb76da30cb287212d56451f80ec8fd79b97c6502eab7a122321cd6d953317ead64c109658bad3a3438b7d469da51808c533aac9b02d4b40892f42894c0c695c6e11fb1d2885839d3769c41cff782e8be6883dbfc66c8a027fcaee1da9d2c472b50931291a51f1aeccb172824b980bd2d22ce45ba0b1909a38c46ac848cedc1ff470fe7e166929d3f595179e8f65c48f98d92a067efdcc7608a4382ee9f0ddff7f717ee21ad5876403c7b5d6ec8a331ee198dca8f6cad59d70ee589b89984b4bb8f7f47f10bf686a8eefd23cfef35482f2eb853c2e1325e4c4dd7e3cd4897841e326ba79d529db7842fe11eefa0c03520948b1a3bd3bdf91dea742b7c461531ee3a3cad150faa770b7112dad4b97150c354e485d7332d287839c191720d69a154cb2c37c0ffff90784843cce18d32601567e5ee9eba2f86fa295bc99ff50199c1f0cd65ff2b3ed4b4c39b7b734a36d9d72cec84f259a24caf7d1738f9c0edbdb8199c35cb9f9fc6f35d113405fece4992f954bc359cdef7ec47f1277025855fa17b1115dc6f609baa3a2d512883bf0454ab0e93e174696dd27138a28808d9517151c496d50379710f715eb136695be42411bd15bd6162e4b584e72e8117e29b7ae792538c13a37126d9b8217ba2cd62a352432216e9470b89eafb4e6e776a800ab8f2ed89375f2b59cd8794c7b8ca4f21981310d13fde83ff42cbcc0f9eed8d8af4166dde6b86e2eaef4cc3cbc4d2dbecf1204145e854911a849867d6821920428c18d9cff06cf870042775781c78e8d03f1a6d27a0a26c0ff13603b347d0c8be222794ce8e32965d9bbdd379ecf341b6a08f4569954159f08f14077f97c27e3deef5ad0b5837e6f4b8ea57d56c32ec3d78f22ad2fcf47109e0f136fa373ab8dc702022c29522530109877101372f2af22527e636866ad9accbe2413bfabb5ab1537f3d483f3315ca7f10dba608ee495def3378f745d8f425dab38814a662468436d479ddba8ff0c9437dfe3382aeb310e7e9fc5f1692ce639f25fb692ace18556687ca97489910e671eefda469771e9d4c80d5b660ffceb020639d8562828e9f9b69a43455824e239523c1e08c535554af444251d6511fa5992ad19f60c535473473fee0e9a666f6418914f784d8dad43b4e643f46d26213d35668ba25c39c52f4203a6d43a0cfef07fab210cb0a3558afed1b9cdb92134726105bae61e64eca765d19f6503f70b4937c1c1be09bbe3eec9d79b91dd8917bc25f283dbea577193e092c75fc76ae187ef6cf1d462353d6016534c913b1c0d1a4b25f9ce8c9eb48883c197534649b9b65c8a9199eef905fb0028032c6f8d12f953911046a39fb04032c541f446a79a660adc03a1cd452c1beccbdf09fe6645628b429d95d045f77f28a617ac8c60bf03599bbbaea0013763557c0485ab8b2f1ddac2ffdc6bb7e88ccc6090eb78e2865ce42d128660c3154431fdf5110165ec1debc5ea505bb0cd87ecdb8f0bc0866f752b9e69cbd7299c5ccb5a590eb8a2104599815eba57c46feca46bf9f6807a767cb864cf7c3e52b6041964dfad39d4dc91bb4ac7e718ef7b1cc2bb63aa4bcf115c43b5d8a1a1d1a5376f50033a96011deec43d97cb7187ea996fadb41734d42b01e46b776a2fe2c5ca5ef9c0da8c6432bd52914e21ab66d6534f25a73ba73a85f51716c658ff4359df958d20c632140411d16c0686cc2ebb02a15e0975898a3e176ee10c0e6a6e6c2b2d504cadd1a4b703668ddd0542509e1d54bf505deb75df7bc1a68680cae0d390ff538a8fbffdfc618cc08b7485f3fe98e4963f88051d86eee847a74152da8589aba110168c62a3d109ced553da3210d3456a248d7ebb0c07b753a89f2973284df5c8d17e64cb681b0358fb81be02420e26ea0f88dd8e73a552d0ba48471237cf2253b18fc90c16ac9673d29554132fa701ea3e7e9c2fd2f977ef06960767ad11dc4c6c92d0d101c5e12727a1b1cc65d7b9ba9789982bc94d8fbfe5fc378fa87beccd9bf10ca7f91ecb1c8004db62a5aac5c19888333ce6017254edd1bd8330d117bd5d367177d395d10f978ff755d110a53364eeb5b89b0804e171799bd82bd41c0c4c6b412bfd3d11c480bbd44a48ade9517477f507ee1942e545a4a91a33a3f18ec7ac6280ae323cfe5ced4464e29ed5e28774809a6742446da5fd758a2699a6fc7098fb23361bf88fbd972e4af483b43d5a37ec7790b73760928e07b3cde63569427c6165f268e565f01cd8cad252c4c0fb5b00f84ef1c8ecf5e2e8a2560e1e153ccacfaaea308c424f8e2181eaa1ad85591ee6234b82ae9a41522f734f4890e4bc3656b7c08425266be4fa03a6eaab09cda13a6b44966a6a8237583662d1c96ce37e7f2a6976c00fb045a4d34e3ec74c8b8ff52e083e05e0dd3cc376e1210116addeeb4ed458588fb34e495bb5386363e58ebb8c222d628dc0353aaea7392018eecfbb888afe54eab093644ad215cd2d9a0d2624fc49fd670a9ab5ecfd7a799cbb1dd82463d9e3be9a62c87d4eba8c5140c77680d85f8bfe852f35dc23f518f910c8a59ea22df934b83b4e589c36416d0485efee7740495bc55da2b0da7a216dd54ae006e5e5c88a845b8a1376f11053fbf6e7e170a0cc8949b5f6f0a1bcfee3a80764b4a971b9e9fd4b90e080a02dd5b8e6460603f1d39cc2da06c30d740ffae61")]
        [TestCase(256, "c34dff9ee4b0238f67ce4daf94db645276db2588a5743361097c595cf31175a0", "b34b8628c02cdc0da551cbe6c2a3eaed1b3493fd5555fcf8ef1c9d6791531f6583a31acb91e8cee4467a0dbdad69576d91ecfeca4b193384ffcb41abf88398582a0f6a5d8a3d0d6306ee1961be1cccb37927be9514ceb3acaf02f8cdfab78becba5a35ae540fb18fd608c50cc8a308dd8881047daa9722615929ff073e38d0b8616c3b6b36d357996b724f31e4fe5f6b1f4bf950ec269d1d4c409c522e5288ba160cd19db86af7dd2bbb09a17d4582353d338493b9d55541da3f1fe77a9bf25a68aac3ff29adeba643f2122e30c0bbe6975f142d328e2c6f50cd524b13cb4837762428f7e8f6a4815d407aca1faf67fd355470a930ae67d57c1f635a0451a6c5e7938bbca1e44c1e7c65da2b8625e7a26828505a959b4c433849ae947182f7c86f93e532632d89020e8f5929bd0ccd2ab1a0600a3c26e98f0c09e678a5e0daec1493a81f6d677d970b8542de87871d9030a9a65106f5431618a166a17da9047834311317196e339e8a7c3985121656aaa98f6b9c4e7b39fc330bbc0a30520b375471ae276f5b20789aeda93cba1a73029ab39d8edc68b9cfd7b19a32e3f5f20b349302f688581720ebf1adde44eb08f5567eb10059fff5f608d68822a4aaf1a836c9c9c39e9dab306cd3070a1eaded1c0ea640bef5cfc76aecc76d57ddd55f0b418724595906ccbbab99f0729b64b133f5300b87f2e5988bac1573bbbf033047a514da4808f748d017809c8c1c3946da913c9a51b76dbebd339dc30965a9851611f7486402370a1077413eba0557e80aa7c43ccea10e2767833a8698a42b7d3d49aa8a36c9476a220189e5f8663a07c44d4a82873d205699fa98d0d976da46b2fb08bdaafcce4e00efdd9257a1d5a91ee463f5d42f855945380e11258d51e3e3a7026af95215cb6da394cd03aebfd6877eab30678db86e50ce7627eb711a8a4bb05ce9243d45fea2638f8d8c6fe8ce0771adc17654c93370d1aaedc7589ee92092dbb537e2c83756b558b2726f7f04c786d4483d98ecad7242c7cb2e7cca0c5c686210b5c62e5e1573471f05615023ce109d8bb73f6db5ddd2475a2119b5a7f6b19e5e83451791f79d1363ce3fea551bccf29786ab3e9ffeb107d64e8ca43de78e4e04e913a112c8d4737f8d0b5bb4a382a70d60cb2c4c73f4bd3b6becf7ff102ed4647664fa7019663a8feca26611a096e3d605a78701d4a9a1262f10c28dd27025fa6a0fcef0b6f4eee3e0fa033319b065f295eeb1425e3b4ca2b7cba14db88808e6c6ab936075e2ebc7a4bd7e52e72f5902318b80b0f03f32d1affcaf37ac9d2e6d187445ae76d4573dfbfc7ee094fe0c166df6acc3bb551d356d1146d12884e11e49ddd0b11e32f2a1b840151eb54bfe9410c9ae5bff41f27676a7f9b5171512d7d315f0eef95bf0a64fbefc7294ca58660adc7b0bca2906c4f4cb4d5298e72861c7d35edf35fe50ff906b1b87ee3b171b581416cc56a34f65af96620ce09726d791ea0c8e71384fffa84312c974d1bed9ff90774a3f7d8fbef7793e8254ff5b47cca65c68e41b52bce7cd4130417b55e35b35db74ef6895ccc5ae2405ef081800673530cefcfc12df7ec8ec61cefc3475827e0dc5a21d6c32bc0f26741b8b592b96b1c98167971d3ae88aa371ad797c50d3da9764614de43a06675d9062d2e5f980f526d9aae72a853836fb34b6bf4d3efbc9a55abd1fced3f2530e130804d339918848ee82e9c2f9624775857e4399603bd84bccd222dce3245c498862dd3075f5dcb67b4f6e18d376f412ceb1be7df82020016bbb5042fa668ac2f1639602fa9d72f349accc46815f6d8ba69e2f0e5df7d89d3a765eb1389ac2eabad6c7f37cd8566ca0066b58e7a5ab2f11a5196d0698e52e0efc662344cec228cb594fe4db40e4c1366764a8dd280a986fa02794e1cec008c42375a7c625b896a7e786a4c099554078426055c79d870959fb55014e2c8d75e113dbc42721aa3114062b1446b86b8e193b852eb96bae07a77be3d46ac2dcd017f2caa7dd0f82171146b067d89b16bae79e8588fd5066fbae17cf75777915e0ac632b39039ecee9b5669778cf2a43a73ceaf3e78f1469e76c001d45257ab0cd9b16095968fe078e2e8abe7333221d93f7b51cdc09ccffe665a0390411a2635b33dd8ba1ca241e62a5fd609d221dff8e2d2a3136d38f16976f9f56d70b760deedf0ed0d6404f5f28c158ce28026598f0c3cf437323d1a73a2fcf19412880a6945e011108d83c644535c8aac948e703693f52fc6362367be6af1f8ad04d4ce7ac9d4947e07641f7fb0480b6b1bff7573d31df3d045e5d8d69c34632cab1d4c9f11c119c5c690e20eef9e3b1c85603ccdf2e6b63633447fe1891583be9a84c1726f9ecc34ddfd51845105683818ca1d5b5dc8f51c0536443df43556cc13e0d76ab633f96b0e9cd16fa25d3d7ee16f2e88e56792f464d3b6e7d0d01fb6652c0cd461f066a7ba67076ba40d1ac117f5e546542e19a24c8037a64794bac87e1e7e8083c475f4716901ee3bba7e1ee8883365624b1b05c0003d6146dbc46ffdf0786a7ec659acc6c9bc296741fdcb12676ad1e584a5aa514c624c4bba7baa55eaf2fe85950d1106571d343a596143da545deb40804b301ef96fcb227088082c9558bc247006106e8c33aaf27e9eb1cf8259912270cb8f493252eb0f529263dc5dd62d8dca8913ad35498b3703b2bcbcf8b01f3dd96e54909c3f713f1ee19b5b3082e5d9f46a0db80f92e205848eebcdecbbad0960af63acf222e98d48a09a5e340bbae4f2c84f8e5b89e556911559038d9ed181f9a413377a7cf408ad8414c060b3f07e68e6cf4c4b102df4c217620f9b0ad1a05917f6427f4c7c9e5ac6517f9a50ca453d62b839e80eb204f8587a926a27bf2969ecb771bc12fcc9f9a14d9517de930c8df56f3d0338d3b2eb317831284e505e692b00690281500cea57434094c90894bc20af467d6981bd8b03cb1c9c7bf925f1280b03eaa3b517abc1fadabff49be97e5febbd393ecde837efed473a8b42ff1cc9a94523d78e3b4be4d1909e880643eef2aa13121ea073661fa890cc4d5040f74a68620a538e2ca4de098568ad954abbbea2501c3c75161373f0324a8543546538242fb9b16e02895de8ad8ed8f91852dac700d742750d3603fca305065246ba254b388ef6009087ecd0b9c570057841df62de00164da9702a4ddea3621b69fb0c776e302a30dd2e3d17c9bf97a2d2b6a587476c243f1d385f6516075d08c67f4dfb075f37f0f064bc0b091a44fb38463e0dcce8c5ef3436a939c7bc129b5cc86116288621542db514201ccdf9b5e49b6b0a30da66dd483a62bbb1b1be115ad66eabf5e8fbe843b920a1bf7013374ff16528bb7c7b1f1749f078c3933c045fd4bf1f2c9dc51fd57048eb7a1f9f852162fb06f6c0ed4311e8dc15b349303d40814d283e0da6c2c0d123420d7b1240629ebe020eb87a9f238ef0e78a482a2daa4a762f2b9d74dc1d34ab7522383bc48263e71eda24df4a65aedc0a2736bfc1b3efca574860f99c2b9742fb2745a952bc5b567509ecd27c6d0911ec0c25b4ba005cebeea22f0ac2b9ae6acc64d80f87d73ebe0f289198b94127924093ccc5524acb4b9518b1ccdd321fffedeadf234ac3108a3796d19566719655f0c8e1dc48957025ef4afce5f5051a1d5e905905990f167d4aaf55c2c84979b0380244723b991ea1d69ada1faabf4bb8c6f803d1586efdcbbccb5e136d494e92131c9de4c274a231e926e7d802cc41dabe77bfb0fba78f8f54a3928c10d7a12705dbe6c6ae3f904e03ab18fc4dd2f776b3b1f4c1f1f2ed3ae00d0a3a2efacc44582f57f7f10a6121e198eb7f3ee088dddfceff8cee41cf13e6663f9884284aba97e1aa473e1a9615d34d1658c330f24bfa3d847cc01d1ebdbb9fc6d2af6cdedd872d1f62b61f8081c718dbefc23cad0420f1feb7973f46242b9ae86e27405add695037544d47dc4c2e189792f3e37d5379e0a354f14eb963246d1c2206b61ecf7cff9b18e87b22e9fad508776ea914938cca9c3695930d84761fbb2193efd31b872b3abbd045eb5b08cf87d52e8224ee5517a8c06add6baf36a4ae1a1884c42c7dbb9ae192f74303eab9ed997ad642e9cc51155035c5b447eba1258d279eeb0ef460ff1360580b6e70ce804e2510b7f1bbeb70d1e0b5dbb1b92cd64b6ffad118d2c84fd09aac316cc5e41ca0f00f91cb1b5a39925c52181b55382c44bec05dd8a723470bd01cece395ff3775892da0a31a1871f373ff5b69023c195ec723f1fc8cce4d18a06f9b0b4883fc08bb7f2b4f6f61ae594e93d9bfd1203351af9cb3ec9736728390aed9cbb4498f8f35544a5250b663922825c03237b7cbebc4f0939d2d345112c4b69d7eae4a834a8f8e65e0c6ddd8012ee24699023af8df8362e622905d3f3061448001ccea74f2ff490c0cd7079dd72983e80f7aa27560008d87900836022745a1ae73f7dc2679ea7fed91d44dacb83e706310b4787250754b028ae2eb7a1ec3607bcf3fb03030d333be5a3c955b7142aa04899e2eb40e51eb892becafaf53ea74ed2e46783854f4a1627d63cb412e87513354993ba7f9b64f3dd292ebde7237297e39770ceaa25b3f26a993dfc41822ab28b21226f84ed001268c27dd6d3d00f913d7fea5d1978eee10dc7cf164691849d6fdd32a2980c6bbdd8e6c1aeb89e16391c3cb6a808f3350f4969b18f3a930136819732f39c0d8431d2eeb3e0d946506878c2e60bc33fde61330586d4ad85ae3339332cf54ff48d97bcd6fe7409a6ef907cb324076b1864af3895e6bd5e123e011b32c17fb60a6d864e2ad8dbb236159f8207d884792c2e06cb30fef315039b6a4e0962feecdca3457c9896e9e410a2131e95580f98a01315ea5ca05cff95960ba6a5091ed29f7ba20a4325566d1266ac42ac01e35855a7c4375daac75c0cd971d7ee02f0b41f5e77ffa785aed795ed99e0e3a4b1e529836e7daeaac881f38ccad9ef8a5965024c20a51834995b2fb3e1d2015004708dee09624cc654c8f06baa6249cbc7a3175c64eb7718df23fc950568d0bd4acc2ccd06b5a92370068686614623c41720a84f3156516e8853e40d3bb72c5d12d95a1f9386759348945864eed7eeef35bb1c50780944888c69c4f4c15203610199fea798f9a92b242b1c9caa62fd806302ae09dfa2b3f9be785f4d29f0ae2253664e9fd96c32695b6f95e8125db14692b3770fb94da6f9d4942d344efef00b92510a1d720453c169662b1004a2e3a4eca0a6d9f499e51fe082b9e646c5035388520adf1154668cea8d84fafb49a94e2786442da54c7438c25c7fcbf854c94a66bde5fc8387efd66b9f89a93a24fe93d92de5f0e9e612383b8d2c038b9683f5ebb63e9c31fd9361e664462d2a0a198da5c449731dadd3ad84c0c56180efc1a30420")]
        public void ShouldMonteCarloTestCSHAKEForSampleSuppliedCase(int digestSize, string message, string digest)
        {
            var subject = new CSHAKE_MCT(new Crypto.CSHAKE.CSHAKE());
            var messageBitString = new BitString(message);
            var digestBitString = new BitString(digest);
            var hashFunction = new HashFunction
            {
                Capacity = digestSize * 2,
                DigestSize = digestSize,
                FunctionName = "",
                Customization = ""
            };

            var domain = new MathDomain();
            domain.AddSegment(new RangeDomainSegment(null, 16, 65536));
            var result = subject.MCTHash(hashFunction, messageBitString, domain, true);

            Assert.IsNotNull(result, "null check");
            Assert.IsTrue(result.Success, result.ErrorMessage);

            System.Console.WriteLine("Result: " + result.Response[result.Response.Count - 1].Digest.ToHex());
            var resultDigest = result.Response[result.Response.Count - 1].Digest;
            Assert.AreEqual(digestBitString.BitLength, resultDigest.BitLength);
            Assert.AreEqual(digestBitString.ToHex(), resultDigest.ToHex());
        }
    }
}
