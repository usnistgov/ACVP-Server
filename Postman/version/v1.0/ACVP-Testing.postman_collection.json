{
	"info": {
		"_postman_id": "9f360835-228c-4073-acbe-090a8df0f56a",
		"name": "Dev-Tests v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "TOTP Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "278515e7-686f-48ea-bbdd-5e3bcf171d18",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"    pm.environment.set(\"next_step\", null);",
									"}",
									"else {",
									"    pm.test(\"response must have totp\", function () {",
									"        pm.expect(jsonData[1].totp);",
									"    });",
									"    ",
									"    pm.environment.set(\"totp_token\", jsonData[1].totp);",
									"",
									"    pm.environment.set(\"next_step\", \"Access Token Login\");",
									"}",
									"",
									"postman.setNextRequest(pm.environment.get(\"next_step\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{https}}{{publicApiRootUrl}}/acvp/totp",
							"host": [
								"{{https}}{{publicApiRootUrl}}"
							],
							"path": [
								"acvp",
								"totp"
							]
						},
						"description": "Test only, not publicly available."
					},
					"response": []
				},
				{
					"name": "Refresh JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "799e70e7-39b1-4ed4-aec3-e22e4aadb458",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"    pm.environment.set(\"next_step\", null);",
									"}",
									"else {",
									"    pm.test(\"response must have access_token\", function () {",
									"        pm.expect(jsonData[1].accessToken);",
									"    });",
									"    ",
									"    pm.environment.set(\"access_token\", jsonData[1].accessToken);",
									"    pm.environment.set(\"next_step\", pm.environment.get(\"post_refresh_step\"));",
									"}",
									"",
									"postman.setNextRequest(pm.environment.get(\"next_step\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"acvVersion\": \"{{acv_version}}\" \n\t\t\n\t}, \n\t{\n\t\t\"password\": \"{{totp_token}}\",\n\t\t\"accessToken\": \"{{access_token}}\"\n\t}\n]"
						},
						"url": {
							"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/login",
							"host": [
								"{{https}}{{publicApiRootUrl}}"
							],
							"path": [
								"acvp",
								"v1",
								"login"
							]
						},
						"description": "Send TOTP to get valid token"
					},
					"response": []
				},
				{
					"name": "Access Token Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2e3f7b8-1bd2-4aeb-8716-513865dc66eb",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"    pm.environment.set(\"next_step\", null);",
									"}",
									"else {",
									"    pm.test(\"response must have access_token\", function () {",
									"        pm.expect(jsonData[1].accessToken);",
									"    });",
									"    ",
									"    pm.environment.set(\"access_token\", jsonData[1].accessToken);",
									"    pm.environment.set(\"next_step\", \"Register\");",
									"}",
									"",
									"postman.setNextRequest(pm.environment.get(\"next_step\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"acvVersion\": \"{{acv_version}}\" \n\t\t\n\t}, \n\t{\n\t\t\"password\": \"{{totp_token}}\"\n\t}\n]"
						},
						"url": {
							"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/login",
							"host": [
								"{{https}}{{publicApiRootUrl}}"
							],
							"path": [
								"acvp",
								"v1",
								"login"
							]
						},
						"description": "Send TOTP to get valid token"
					},
					"response": []
				},
				{
					"name": "TOTP for refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "394b04d0-67c9-47ea-81d1-3babd8c58fe2",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.error) {",
									"    pm.environment.set(\"next_step\", null);",
									"}",
									"else {",
									"    pm.test(\"response must have totp\", function () {",
									"        pm.expect(jsonData[1].totp);",
									"    });",
									"    ",
									"    pm.environment.set(\"totp_token\", jsonData[1].totp);",
									"",
									"    pm.environment.set(\"next_step\", \"Refresh JWT\");",
									"}",
									"",
									"postman.setNextRequest(pm.environment.get(\"next_step\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{https}}{{publicApiRootUrl}}/acvp/totp",
							"host": [
								"{{https}}{{publicApiRootUrl}}"
							],
							"path": [
								"acvp",
								"totp"
							]
						},
						"description": "Test only, not publicly available."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Algorithms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b32ad368-2037-4489-b11b-aba94bb13d5f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "13746062-ef3b-4fc3-bb70-3f547049e022",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/algorithms",
					"host": [
						"{{https}}{{publicApiRootUrl}}"
					],
					"path": [
						"acvp",
						"v1",
						"algorithms"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Answers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5ce955e-4c31-43b7-8d7d-3cbb84e0e7ce",
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"if (jsonData[1].retry) {",
							"    pm.environment.set(\"next_step\", null);",
							"    ",
							"    pm.test(\"response must have testResults\", function () {",
							"        pm.response.to.have.jsonBody(\"testResults\");",
							"    });",
							"}",
							"else {",
							"    pm.test(\"answers must have vsId\", function () {",
							"        pm.expect(jsonData[1]).to.have.property('vsId');",
							"    });",
							"        ",
							"    pm.test(\"answers must have tests\", function () {",
							"        pm.expect(jsonData[1]).to.have.property('testGroups');",
							"    });",
							"    ",
							"    pm.environment.set(\"prev_step\", \"Get Answers\");",
							"    pm.environment.set(\"algorithm\", jsonData[1].algorithm);",
							"    ",
							"    if (jsonData[1].mode) {",
							"        pm.environment.set(\"mode\", jsonData[1].mode);",
							"    }",
							"    else if (jsonData[1].retry) {",
							"        pm.environment.set(\"next_step\", null);",
							"    }",
							"    else {",
							"        pm.environment.set(\"mode\", null);",
							"    }",
							"    ",
							"    pm.environment.set(\"test_results\", JSON.stringify(jsonData[1].testGroups));",
							"    pm.environment.set(\"next_step\", \"Post Answers\");",
							"}",
							"",
							"postman.setNextRequest(pm.environment.get(\"next_step\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/testSessions/{{testSession_Id}}/vectorSets/{{vs_id}}/expected",
					"host": [
						"{{https}}{{publicApiRootUrl}}"
					],
					"path": [
						"acvp",
						"v1",
						"testSessions",
						"{{testSession_Id}}",
						"vectorSets",
						"{{vs_id}}",
						"expected"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Disposition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0674caf-b2de-4a80-bdc5-cbc7e96ba951",
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"prev_step\", \"TOTP for refresh\");",
							"pm.environment.set(\"post_refresh_step\", \"Get Disposition\");",
							"",
							"if (jsonData[1].retry) {",
							"    // If response has retry, repeat this call",
							"    pm.environment.set(\"retry\", 10);",
							"    pm.environment.set(\"next_step\", \"Wait\");",
							"}",
							"else {",
							"    pm.test(\"disposition must have vsId\", function () {",
							"        pm.expect(jsonData[1]).to.have.property('vsId');",
							"    });",
							"    ",
							"    pm.test(\"disposition should pass\", function () {",
							"        pm.expect(jsonData[1].disposition).to.eql('passed');",
							"    });",
							"    ",
							"    pm.environment.set(\"next_step\", null);",
							"}",
							"",
							"postman.setNextRequest(pm.environment.get(\"next_step\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/testSessions/{{testSession_Id}}/vectorSets/{{vs_id}}/results",
					"host": [
						"{{https}}{{publicApiRootUrl}}"
					],
					"path": [
						"acvp",
						"v1",
						"testSessions",
						"{{testSession_Id}}",
						"vectorSets",
						"{{vs_id}}",
						"results"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a127a6dd-8276-43b5-8cd3-c1af513bd5fb",
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"prev_step\", \"Register\");",
							"",
							"if (jsonData.error) {",
							"    pm.environment.set(\"next_step\", null);",
							"}",
							"else {",
							"    pm.test(\"response must have different access_token\", function () {",
							"        pm.expect(jsonData[1].accessToken);",
							"        pm.expect(jsonData[1].accessToken).to.not.equal(pm.environment.get(\"access_token\"));",
							"    });",
							"    ",
							"    pm.environment.set(\"testSession_Id\", jsonData[1].url.split('/').pop().trim());",
							"    ",
							"    pm.environment.set(\"vs_id\", jsonData[1].vectorSetUrls[0].split('/').pop().trim());",
							"    pm.environment.set(\"access_token\", jsonData[1].accessToken);",
							"",
							"    pm.environment.set(\"next_step\", \"Get Prompt\");",
							"}",
							"",
							"postman.setNextRequest(pm.environment.get(\"next_step\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ef95053-32eb-4ffe-a5b4-d16f9ff70af5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n\t\t\"acvVersion\": \"{{acv_version}}\"\n\t},\n\t{\n\t\t\"isSample\": true,\n\t\t\"algorithms\": [{{algorithms}}]\n\t}\n]"
				},
				"url": {
					"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/testSessions",
					"host": [
						"{{https}}{{publicApiRootUrl}}"
					],
					"path": [
						"acvp",
						"v1",
						"testSessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Prompt",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07d71740-e124-40e0-90ec-ac24e1ceb83b",
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"prev_step\", \"TOTP for refresh\");",
							"pm.environment.set(\"post_refresh_step\", \"Get Prompt\");",
							"",
							"if (jsonData.error) {",
							"    pm.environment.set(\"next_step\", null);",
							"}",
							"else {",
							"        pm.environment.set(\"acv_version\", jsonData[0].acvVersion);",
							"        ",
							"    if (jsonData[1].retry) {",
							"        // If response has retry, repeat this call",
							"        // The API can only run for 10 seconds maximum",
							"        pm.environment.set(\"retry\", 10);",
							"        pm.environment.set(\"next_step\", \"Wait\");",
							"    }",
							"    else {",
							"        ",
							"         pm.test(\"prompt must have vsId\", function () {",
							"            pm.expect(jsonData[1]).to.have.property('vsId');",
							"        });",
							"        ",
							"        pm.test(\"prompt must have tests\", function () {",
							"            pm.expect(jsonData[1]).to.have.property('testGroups');",
							"        });",
							"        ",
							"        // If response is complete, move on to next call",
							"        pm.environment.set(\"prev_step\", \"Get Answers\");",
							"        pm.environment.set(\"next_step\", \"Wait\");",
							"    }",
							"}",
							"",
							"postman.setNextRequest(pm.environment.get(\"next_step\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/testSessions/{{testSession_Id}}/vectorSets/{{vs_id}}",
					"host": [
						"{{https}}{{publicApiRootUrl}}"
					],
					"path": [
						"acvp",
						"v1",
						"testSessions",
						"{{testSession_Id}}",
						"vectorSets",
						"{{vs_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wait",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e4d72a8-46ed-485c-815a-1198cf698bf4",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"next_step\", pm.environment.get(\"prev_step\"));",
							"postman.setNextRequest(pm.environment.get(\"next_step\"));"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delay/{{retry}}",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delay",
						"{{retry}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Answers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da311790-c808-447c-a78e-a9cb020bdb0b",
						"exec": [
							"pm.environment.set(\"next_step\", \"Get Disposition\");",
							"postman.setNextRequest(pm.environment.get(\"next_step\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "56fd35ad-4ea5-46ab-a42c-7f4433fa812d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"acvVersion\": \"{{acv_version}}\"\n  },\n  {\n    \"vsId\": {{vs_id}},\n    \"algorithm\": \"{{algorithm}}\",\n    \"testGroups\": {{test_results}}\n  }\n]"
				},
				"url": {
					"raw": "{{https}}{{publicApiRootUrl}}/acvp/v1/testSessions/{{testSession_Id}}/vectorSets/{{vs_id}}/results",
					"host": [
						"{{https}}{{publicApiRootUrl}}"
					],
					"path": [
						"acvp",
						"v1",
						"testSessions",
						"{{testSession_Id}}",
						"vectorSets",
						"{{vs_id}}",
						"results"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5dcad1f6-a454-4236-bfe3-fb6a97b66b3c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8b28b0c3-64eb-4a00-a088-8c1a44cdef98",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"response must be valid and have a json body\", function () {",
					"     pm.response.to.be.ok; ",
					"     pm.response.to.be.withBody;",
					"     pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}