using NIST.CVP.Crypto.RSA.PrimeGenerators;
using NIST.CVP.Crypto.SHA2;
using NIST.CVP.Math;
using NUnit.Framework;

namespace NIST.CVP.Crypto.RSA.Tests.PrimeGenerators
{
    [TestFixture]
    public class RandomProvablePrimeGeneratorTests
    {
        [Test]
        [TestCase(0, "010001", "ABCD")]
        [TestCase(2048, "03", "ABCD")]
        public void ShouldFailWithBadParameters(int nlen, string e, string seed)
        {
            var subject = new RandomProvablePrimeGenerator();
            var result = subject.GeneratePrimes(nlen, new BitString(e).ToPositiveBigInteger(), new BitString(seed));
            Assert.IsFalse(result.Success);
        }

        [Test]
        [TestCase(2048, ModeValues.SHA1, DigestSizes.d160, "0100000001", "e5f707e49c4e7cc8fb202b5cd957963713f1c4726677c09b6a7f5dfe", "ff03b1a74827c746db83d2eaff00067622f545b62584321256e62b01509f10962f9c5c8fd0b7f5184a9ce8e81f439df47dda14563dd55a221799d2aa57ed2713271678a5a0b8b40a84ad13d5b6e6599e6467c670109cf1f45ccfed8f75ea3b814548ab294626fe4d14ff764dd8b091f11a0943a2dd2b983b0df02f4c4d00b413", "dacaabc1dc57faa9fd6a4274c4d588765a1d3311c22e57d8101431b07eb3ddcb05d77d9a742ac2322fe6a063bd1e05acb13b0fe91c70115c2b1eee1155e072527011a5f849de7072a1ce8e6b71db525fbcda7a89aaed46d27aca5eaeaf35a26270a4a833c5cda681ffd49baa0f610bad100cdf47cc86e5034e2a0b2179e04ec7")]
        [TestCase(2048, ModeValues.SHA2, DigestSizes.d224, "0100000001", "f359cf48928f841fb5f19b11cb931a46f7985a06d5c770006951d058", "bcc8e2df5cb9fc2f6ad530f8f4e69839b85f95481e5dd994680b7533402219cb0be04272876bb00306e80474e49aad7bbafb11a9ec598e2047f6f8e0bcd4654689bbf0c0f59b02223ec45fc0713e7e4dbeee2cddb8b73cf155662e471224ad95fc1dffa5e97ef0a705263b59b7b6002e2ed24829f6246d819565ba6e641676c3", "e92b055e68405fbb71285008525d8c450bb2b52ae9d7202d938c3bea8dd168a9055615ef7d9f87546ad9a135015639604fbe5c0d5d9cf363648a89a9570eaebb1936a7c79b652a65a6b4edac5cc8f0b28213eee41bdba7195f34e98677b574e6fd81b3626c7da80a9b6d98e90f4119c4b580ad425c5dd9772c6337861cd9f2e1")]
        [TestCase(2048, ModeValues.SHA2, DigestSizes.d256, "0100000001", "9ce69732cca7454a2b278d3bf51030c39ec5596a0441aca61e4dfe31", "e8b6eb98eabc1637ea554660797d9e9ae6c1ccb1ce9bc1a3bcaae027f4b8ecafe4505b2f9fd2adcb467ae2a284adea757a74ae21988e14b1a2d2c9c392000bfd30673557818bfc91babfd5ee594ffadcd1466864cf30b9ccd43489a31f182caeed66b22343daffedee07244f04c6940fde856f1a101b19f1a40077d2a342b9e5", "dc42ff716f6ee9c6f3d0eb2efb71e1d5567c7b3bc25a112ffa49850bc78f96b4a901ff82976e9974e777755c9775ccafb8102c5a69309a73f788aa54ea796a738197fb666c8be29596bf070ee687ab6f0aa21a70a0db60445e72d13ef9b88f8a40d9a0226f61c0d5a0442c0ddf74028d9a1d247afffb215ced3cbfa4c6c28eb1")]
        [TestCase(2048, ModeValues.SHA2, DigestSizes.d384, "0100000001", "25711ddf864addcf7a4ee2dd9df52bd23403aae31264583f107186d8", "e09c858990dc5718d2c77929f78decb6ed05d18dbdd0e0eb560b895f52e27fc668aaf208be9abf9b9b3e42ad5f134b0fa01c897c96d187a11d59ee5d50d468eefd935efc83b26d49251613c58928bc22080d31de9838b9359447fe685c206dfad56b7e19e16d766b8e46fa6015d13cf1c16bd10b3d3c57b2519167c3af0d88e5", "d53406670294780bd8e7ecd7b094c6e2c0b0d107fee1c1f5da7415f78ef8bb542bc63097113a8c765ebb00bf4a32a694c91dcc46fb00576bee609cd4446cfea340ef693d5e9884c64d58e18417a706f8b533485689d91408e502e28a8e1f77e75ef54f3b14fcbbf12bb835f591c2f134ea5bfce0c0a8207abd42aba357e8ef61")]
        [TestCase(2048, ModeValues.SHA2, DigestSizes.d512, "0100000001", "73c428249fa75ae1787e371cecbd8f99fa681a2c61fbc125a47c65a8", "f76d31eaf34f36187e50970ad3b21b70f8dc2b044f469251c23ebd0937c9a7d6e783015be9e53c8188b4d48ca2ecfe4ab01c18a20be96b3b76f516822907085b4107a6f0838b78097f4396ef45646e099aac0b0cd232f120f0d536ed7e93298b47587d4142b11e0acb7cd0f5043e723d5626c94f8899e314f62b9ec125f9f1ef", "cbba9eb5d81aa8ff804c5244d798f1b05ef8332297c5c492de906e11f4240744bc1bef48ac398ea635f33c53fb22fc94169ed84cfec8c2111a3548d5b170d1f75d6d6c80d91a0a7d5fb00d65b0f4e15f324f62e26aedd42536cc38c857272fd04ae87bdea1fcacd482487f31e3be03c11061d14aef2b924877a5df55f23e6615")]
        [TestCase(3072, ModeValues.SHA1, DigestSizes.d160, "0100000001", "9561c1db511e391ff04a9180c67a08bf775000b025bdae674d416f6b54753c46", "f269257aabb068fded8ab58f4b735a9a4fb4c727dbb47dd82a23591cc1f4bfde543ac3074fdbb8f571cdd96332e1fb3ad368c991555f4bcec0ef874fffaab6a047e6ba104783307b6dce12c5a717857bdf8f2edb15f42f40b5e721b6cbbccfbc8f86baf63f034e46fb2263ac9730c4653d72089fb3202394525ef262b4ccde1e9a6c0f3ef9e4bb90b9d0d2ab572f1a61a237fcfbef079dfb18650de055e3a9a00d209c2b15b5bf2dd286f10b8aa0c2d061ec43d4c363aa1424c49a0d5f72dba5", "bd5320f865e6573fb9a6b02dcdca394b3376bd2eb0c1a2427d2e61f933014d5620fdfbb0d59938146480c44c109800cb99c0e7c4d9f3d6114e3d3c7c950d0e0e2763468968683f0b0b63e618b368516eee1a5a494aa7818f435d2a26fdc40ecc3fb390c5928aba48a8dd8e66db683ff95d48f2525cfd4198211005b303e3a7052ae60182a4f815d88a03fb0efbbd519612acd3d8018876c0084070afeacef09391fa25ac470d33d61fe41d4a9370544d6ee9312b92b67d191098a91ac9b087c3")]
        [TestCase(3072, ModeValues.SHA2, DigestSizes.d224, "0100000001", "cb7d720d1f179ba0cef363cd163174ea32af93e79f54ee296ca2d50713b9d6b9", "da36b8a7ab0b5a786469fd4c30fec6a257dee834d08fca6ea035d2beefd3d0be252624d8fc940d58fd6bee937a280c0571f8f4dba7305eccb180cec7ce6d65dea3a8a8c912a42c71ff524fc76cbb1a71d2f1bc135c165d203d3191ce5e946f8895cc58462c8a138dddc2827dbaca253e2935aa20987691d44d231a6ad8e671830cd1bde1f264c7d6c3306a6045eff31f564badcd727daa44e294eaadd9d49b49f0fdcf88c4d703768e5a9f7c78dfc2bc9848f89c38d065d277a0394e7aa51949", "d7416adfca132ddd68aa2bb799607e199f6f564f0f1e0dd930688c44fa83885ba631d62b57beb22ad1d3fc19273921aeec765a74bb0d4d7d95d5c17c347551e409fb4719f3d70ee651d8c1e61c01db372e6f4ac56e79a130430988d8e85a99cc66ab817af3fcae853d5ce052fc88b1f7b35627d8420a5567ab739c7d897ab4cd610c8e9d2c800c072a391784daf2620f94ef85683b2b7ea1d37793f78b2f290ead8fb94270e6838df6dc93f13d2958e90c92b18bdd969d248bb2918fc078e17d")]
        [TestCase(3072, ModeValues.SHA2, DigestSizes.d256, "0100000001", "3a844a987bad733ac4914d4e7f1f27fb3db71868d1f65b123f9f3c8e3dd51dc6", "cda22d8be399894fe06cb6d5cc1fc4e6c0e16fb3fa861a90252284f48f2d4e097391b93c3f2790be1a35d9a13f93595e66084bb31afdcd799e1f3dc51f78538491f5f3a408f82010086258f3341407f687e60a2c143eacde596234556bb0bc8d7904146096be2d431e4274fd52d0664114fb27da0256227be0ed3948f0b1f80df8c90d3b8efe17a689527d177ecfe690306fbbc009f6fdd89dd969e577dd545cb1f78145ffcf0bff3f41be45a3abf89c3b76f024da1643c52e1234a4e096662b", "cdd983663a079ec1d9fde67f0069041e93ca93792e1ac9f59f599ada13ca9cc89be82d1210cb43879b6bca71d15d2ae3358b788b805fc448aaf9433ec91cb62bb49a6b20641b0e4d867cf168852a126cdc080bc748f79b8d5402a5a7dcc734d3c7f9b8b5b2e84da6974862015b0762ba75fb34461582e57aa0a06b15fc93aa4ad35e13750bd1b9b99d6675ac077b0ed1106cf85489ca64a440fe76a7ca234e0bd79f662336a95d60bc558d4b150d1757591a61fc6db85e58aa15f125cc139bdf")]
        [TestCase(3072, ModeValues.SHA2, DigestSizes.d384, "0100000001", "ad0c42e002efc105f2956a6b7899add6030a15f14aa8e066376e373636457162", "f29dc185111db13427cde1af67c9b4464ce701769f772b793e0df358ba65bc556ae6b539426d827481ed1634a2fc24004a4b330d59c2e0d7058196be57fb80bda555412b70914fcc9de124673d9e02cc37ad2733082fa9ceb21c277c5af659ae7d915e1df8bc2bb68badc0d51ea3a4cc826078c484fe817ee2163273e9f4df0c721a3a6ea562eb24e6ee80ffe4cb81d1ae5e3092d9ce691a1cfec1b760cdac9dc5fc0f13a1fdcdbfe5554dc8066f6332970a3127b271300e1aba98acc31d766f", "d2921e8eadfea920ae84b4203094c8f0ba18c1d81e5e1ac4359915c45548a3851769b234ab51706efb8be6f26cddb0b7bc396ed150b541437a37428eada8b51fde456074898193edca73da054cd3132d47ba52201058431235d9f3a23b80edbfdefccd7964d3da9fd175e2fa9591fa121ccc7f6e005bc5c16cafc0ce4103129944f44e4d5b47b6b46e326175137ee5f78f82dd2579de0b6da94f5426a8f4febf2a6ac0c02f6e4691afd181cbfdfe2c5ef415fa2782b1a34339dd485c8a409ce3")]
        [TestCase(3072, ModeValues.SHA2, DigestSizes.d512, "0100000001", "596f67f2b589b3514d92104e397e39057c7138ea71754867b7e1f289e468f072", "eb06083ad23cba32ab6fe80d161fe06bdb41819fea57e6961439e31f7c18a97cae6f6ff0200e88feca88dbbfa00dcc77430067105480d9fde809675ab6e8b2ddb762cb000d163ff022903e5b4e052c4ad414229bf15fd56f9b75fca761c1f1748f9c686f110157d88ad65db3824a5695b7debd7d51fbe6e6f9386b1ffefed4d348716f664b5e9663325e9d1157cee7019b2633cf679815daebb898c259e86d010fb312ff2895042867d74ac14cc2d6b6583c221c6764359fd7fc79b163209903", "c4a07fd73529b1cd1fe397a959d6f1d236b9f90814bc7006f2cb0d6ee22226c9b515c2bdad51627e149d82b339214233aa29a97a6d5fc026d050dc6f615d331072ebd3947eac87083ecd88ccec0b2a2cb1dce867096f592f37715d0ad67a081e60caf0d0eaabd410905e9c464bface12aa6240145580829eccae55ab1993a3ba2773487031b986387f754423715b6afa2cf4daff4971e71a5c93df547a67a7bd6b89f0009d1ce644bc6609ddc0fd9148c9a2c5bc2a1915999fd658252d68c75f")]
        public void ShouldPassWithGoodParameters(int nlen, ModeValues mode, DigestSizes dig, string e, string seed, string p, string q)
        {
            var subject = new RandomProvablePrimeGenerator(new HashFunction {Mode = mode, DigestSize = dig});
            var result = subject.GeneratePrimes(nlen, new BitString(e).ToPositiveBigInteger(), new BitString(seed));
            Assert.IsTrue(result.Success, result.ErrorMessage);
            Assert.AreEqual(new BitString(p).ToPositiveBigInteger(), result.P, "p");
            Assert.AreEqual(new BitString(q).ToPositiveBigInteger(), result.Q, "q");
        }

        //[Test]
        //[TestCase(18,  "b24d92a1d4a8c5cefd8e93e2db24936262259c8cac122325e28f0850", "0002ee35")]
        //[TestCase(18,  "4341382476e1feba95d4e8e4d63bd9adda918a761a169efe27c6217f", "00035413")]
        //[TestCase(18,  "32d0f92233675392519e0b9650e42721a3dc740caacc0d1fb6a6b39d", "00038525")]
        //[TestCase(18,  "6fcaf1e5e02dff1b08480b0483e32902ed4fcbd90414113b1e90353d", "0003db3b")]
        //[TestCase(18,  "6fcaf1e5e02dff1b08480b0483e32902ed4fcbd90414113b1e937750", "00033ceb")]
        //[TestCase(18,  "4ab3e23a488eae6d0fe5f2c284a7ec6ca5a9366f815527e6e2e28fb8", "00036757")]
        //[TestCase(18,  "4ab3e23a488eae6d0fe5f2c284a7ec6ca5a9366f815527e6e2e0f5ad", "00038e9d")]
        //[TestCase(18,  "32d0f92233675392519e0b9650e42721a3dc740caacc0d1fb6a83429", "0003c5a1")]
        //[TestCase(34,  "b24d92a1d4a8c5cefd8e93e2db24936262259c8cac122325e28dceee", "00000003cb2f2737")]
        //[TestCase(34,  "b24d92a1d4a8c5cefd8e93e2db24936262259c8cac122325e28f0850", "0000000359549567")]     // 142
        //[TestCase(258, "b24d92a1d4a8c5cefd8e93e2db24936262259c8cac122325e28f0850", "0000000377813172e5f30b28691b22aaed872ee2a7b83fefe27697d2f0d24ee2ada02f63")]
        //[TestCase(513, "4ab3e23a488eae6d0fe5f2c284a7ec6ca5a9366f815527e6e2e28fb8", "00000001fc888d6c0e49ea84e235dc4f536c54b95ce9bd0a8ed0bfe5fbe786a8cb1175808840db49b3c61b43ed85e4416993ef1146a4b5f94ffd60e934201e95a530e611")]
        //public void ShouldShaweTaylorCorrectly(int len, string seed, string prime)
        //{
        //    var subject = new RandomProvablePrimeGenerator(new HashFunction {Mode = ModeValues.SHA1, DigestSize = DigestSizes.d160});
        //    var result = subject.ShaweTaylorRandomPrime(len, new BitString(seed).ToPositiveBigInteger());
        //    Assert.AreEqual(new BitString(prime).ToPositiveBigInteger(), result.Prime);
        //}

        //[Test]
        //// C10-0.txt
        //[TestCase(1024, 1, 1, "be075a0bcdf2f2785d85acb63ff37638bb3bdb87c4ad1476d21eb12d", "5373c7", "fdd7fee40b6b3832e02edf01f5da5c8f0a5be18b6e06211ef6324c57081685813914e1bd19c3b5007219853710be02ae3f8c7b3f800a3cc6098db692518e1c58f2f899a98a48ff3a36e0596b98e427171ca69e4ee13ae9fcb7156ebbaf413b390b91c4682cc15438d0ba13872b929cb7089fe8f7445c48fa681c60e5fb38a24b")]
        //// C10-8.txt
        //[TestCase(1024, 1, 1, "c6c4a2a68995815536423c31aade68add7fad655921a601bfff35b97", "7dc47b", "cf6c3a760e20b3d4c3e269b9a59c99bb795578ea3a0d4662e50ae9b79955e9fee8b265bc942f7c1ac4b8c6b7f92caa5b4728bbfeb234de6275e01c2328a4016f51b44ddd2a99d8f9e1d0ddfa2ab9a495f11f6becff614a9cc68a00893f67b2e891cc2a246f2e6087b8d268975cde81fedcbcb3e3d1a79de6ed988e318ca9c8f5")]
        //public void ShouldProvablePrimeConstructionCorrectly(int L, int N1, int N2, string seed, string e, string prime)
        //{
        //    var subject = new RandomProvablePrimeGenerator(new HashFunction {Mode = ModeValues.SHA1, DigestSize = DigestSizes.d160});
        //    var result = subject.PPC(L, N1, N2, new BitString(seed).ToPositiveBigInteger(), new BitString(e).ToPositiveBigInteger());
        //    Assert.AreEqual(result, new BitString(prime).ToPositiveBigInteger());
        //}
    }
}
