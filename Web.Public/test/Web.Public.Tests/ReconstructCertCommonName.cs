using System;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using NIST.CVP.Math;
using NUnit.Framework;

namespace Web.Public.Tests
{
	[TestFixture]
	public class ReconstructCertCommonName
	{

		[Test]
		public void ShouldGetCommonNameFromCert()
		{
			var expectedSubject = "E=russell.hammett@nist.gov, CN=Russ Hammett, OU=ACVP, O=NIST, L=Gaithersburg, S=Maryland, C=US";
			var certBytes = new BitStringoBytes();
		
			var cert = new X509Certificate2(certBytes);
			
			Assert.AreEqual(expectedSubject, cert.Subject);
		}
		
		public static byte[] StringToByteArray(string hex) {
			return Enumerable.Range(0, hex.Length)
				.Where(x => x % 2 == 0)
				.Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
				.ToArray();
		}
	}
}